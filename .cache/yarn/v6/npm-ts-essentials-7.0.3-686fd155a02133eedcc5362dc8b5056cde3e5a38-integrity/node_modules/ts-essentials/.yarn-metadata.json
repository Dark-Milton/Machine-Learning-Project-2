{
  "manifest": {
    "name": "ts-essentials",
    "description": "All essential TypeScript types in one place",
    "keywords": [
      "typescript",
      "types",
      "essentials",
      "utils",
      "toolbox",
      "toolbelt",
      "lodash",
      "underscore"
    ],
    "version": "7.0.3",
    "main": "dist/index.js",
    "types": "dist/index.d.ts",
    "repository": {
      "type": "git",
      "url": "git@github.com:krzkaczor/ts-essentials.git"
    },
    "author": {
      "name": "Krzysztof Kaczor",
      "email": "chris@kaczor.io"
    },
    "license": "MIT",
    "scripts": {
      "build": "rimraf ./dist && tsc -p tsconfig.prod.json --outDir ./dist",
      "formatDeclarations": "prettier --ignore-path *.js --write dist/*.d.ts",
      "prepublishOnly": "yarn test && yarn build && yarn formatDeclarations",
      "test": "prettier -c **/*.ts && tsc --noEmit",
      "test:fix": "prettier --write **/*.ts && tsc --noEmit",
      "prerelease": "yarn test",
      "release": "yarn build && yarn formatDeclarations && yarn changeset publish"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "typescript": ">=3.7.0"
    },
    "devDependencies": {
      "@changesets/cli": "^2.11.2",
      "@codechecks/build-size-watcher": "^0.1.0",
      "@codechecks/client": "^0.1.11",
      "conditional-type-checks": "^1.0.4",
      "prettier": "^1.19.1",
      "rimraf": "^3.0.2",
      "typescript": "^3.7.2"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-ts-essentials-7.0.3-686fd155a02133eedcc5362dc8b5056cde3e5a38-integrity/node_modules/ts-essentials/package.json",
    "readmeFilename": "README.md",
    "readme": "<p align=\"center\">\n  <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/146/toolbox_1f9f0.png\" width=\"120\" alt=\"ts-essentials\">\n  <h3 align=\"center\">ts-essentials</h3>\n  <p align=\"center\">All essential TypeScript types in one place ðŸ¤™</p>\n  <p align=\"center\">\n    <img alt=\"Downloads\" src=\"https://img.shields.io/npm/dm/ts-essentials.svg\">\n    <img alt=\"Build status\" src=\"https://github.com/krzkaczor/ts-essentials/actions/workflows/ci.yml/badge.svg\">\n    <a href=\"/package.json\"><img alt=\"Software License\" src=\"https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\"></a>\n    <img src=\"https://img.shields.io/badge/all_contributors-29-orange.svg?style=flat-square\" alt=\"All Contributors\">\n    <a href=\"https://codechecks.io\"><img src=\"https://raw.githubusercontent.com/codechecks/docs/master/images/badges/badge-default.svg?sanitize=true\" alt=\"codechecks.io\"></a>\n  </p>\n</p>\n\n## Install\n\n```sh\nnpm install --save-dev ts-essentials\n```\n\nðŸ‘‰ We require `typescript>=3.7`. If you're looking for support for older TS versions use `ts-essentials@3` (for 3.6>=)\nor `ts-essentials@2` instead. If you use any [functions](https://github.com/krzkaczor/ts-essentials/blob/master/lib/functions.ts) you should add `ts-essentials` to your `dependencies` (`npm install --save ts-essentials`) to avoid runtime errors in production.\n\n## What's inside?\n\n- [Install](#Install)\n- [What's inside?](#Whats-inside)\n  - [Basic](#Basic)\n  - [Dictionaries](#Dictionaries)\n  - [Deep\\* wrapper types](#Deep-wrapper-types)\n    - DeepPartial\n    - DeepRequired\n    - DeepReadonly\n    - DeepNonNullable\n    - DeepNullable\n    - DeepUndefinable\n  - [Writable & DeepWritable](#Writable)\n  - [Buildable](#Buildable)\n  - [Omit](#Omit)\n  - [StrictOmit](#StrictOmit)\n    - [Comparison between `Omit` and `StrictOmit`](#Comparison-between-Omit-and-StrictOmit)\n  - [DeepOmit](#DeepOmit)\n  - [OmitProperties](#OmitProperties)\n  - [PickProperties](#PickProperties)\n  - [NonNever](#NonNever)\n  - [Merge](#Merge)\n  - [MarkRequired](#MarkRequired)\n  - [MarkOptional](#MarkOptional)\n  - [ReadonlyKeys](#ReadonlyKeys)\n  - [WritableKeys](#WritableKeys)\n  - [OptionalKeys](#OptionalKeys)\n  - [RequiredKeys](#RequiredKeys)\n  - [PickKeys](#pickkeys)\n  - [UnionToIntersection](#UnionToIntersection)\n  - [Opaque types](#Opaque-types)\n  - [Tuple constraint](#Tuple-constraint)\n  - [Exhaustive switch cases](#Exhaustive-switch-cases)\n  - [ValueOf type](#ValueOf-type)\n  - [ElementOf type](#ElementOf-type)\n  - [AsyncOrSync type](#AsyncOrSync-type)\n  - [Awaited type](#awaited-type)\n  - [Newable](#newable)\n  - [Assertions](#Assertions)\n  - [Exact](#Exact)\n  - [XOR](#XOR)\n  - [Functional type essentials](#functional-type-essentials)\n    - Head\n    - Tail\n- [Contributors](#Contributors)\n\n### Basic\n\n- `Primitive` type matching all primitive values.\n- `noop` function that takes any arguments and returns nothing, as a placeholder for e.g. callbacks.\n\n### Dictionaries\n\n_keywords: map_\n\n```typescript\nconst stringDict: Dictionary<string> = {\n  a: \"A\",\n  b: \"B\",\n};\n\n// Specify second type argument to change dictionary keys type\nconst dictOfNumbers: Dictionary<string, number> = {\n  420: \"four twenty\",\n  1337: \"HAX\",\n};\n\n// You may specify union types as key to cover all possible cases. It acts the same as Record from TS's standard library\nexport type DummyOptions = \"open\" | \"closed\" | \"unknown\";\nconst dictFromUnionType: Dictionary<number, DummyOptions> = {\n  closed: 1,\n  open: 2,\n  unknown: 3,\n};\n\n// and get dictionary values\ntype stringDictValues = DictionaryValues<typeof stringDict>;\n// Result: string\n\n// When building a map using JS objects consider using SafeDictionary\nconst safeDict: SafeDictionary<number> = {};\nconst value: number | undefined = safeDict[\"foo\"];\n\n// With SafeDictionary you don't need to use all of the sub-types of a finite type.\n// If you care about the key exhaustiveness, use a regular Dictionary.\ntype ConfigKeys = \"LOGLEVEL\" | \"PORT\" | \"DEBUG\";\nconst configSafeDict: SafeDictionary<number, ConfigKeys> = {\n  LOGLEVEL: 2,\n};\nconst maybePort: number | undefined = configSafeDict[\"PORT\"];\n\nconst configDict: Dictionary<number, ConfigKeys> = {\n  LOGLEVEL: 2,\n  PORT: 8080,\n  DEBUG: 1,\n};\nconst port: number = configDict[\"PORT\"];\n```\n\n### Deep\\* wrapper types\n\n- DeepPartial\n- DeepRequired\n- DeepReadonly\n- DeepNonNullable\n- DeepNullable\n- DeepUndefinable\n\n_keywords: recursive, nested, optional_\n\n```typescript\ntype ComplexObject = {\n  simple: number;\n  nested: {\n    a: string;\n    array: [{ bar: number }];\n  };\n};\n\ntype ComplexObjectPartial = DeepPartial<ComplexObject>;\nconst samplePartial: ComplexObjectPartial = {\n  nested: {\n    array: [{}],\n  },\n};\n\ntype ComplexObjectAgain = DeepRequired<ComplexObjectPartial>;\nconst sampleRequired: ComplexObjectAgain = {\n  simple: 5,\n  nested: {\n    a: \"test\",\n    array: [{ bar: 1 }],\n  },\n};\n\ntype ComplexObjectReadonly = DeepReadonly<ComplexObject>;\n\ntype ComplexNullableObject = {\n  simple: number | null | undefined;\n  nested: {\n    a: string | null | undefined;\n    array: [{ bar: number | null | undefined }] | null | undefined;\n  };\n};\n\ntype ComplexObjectNonNullable = DeepNonNullable<ComplexNullableObject>;\nconst sampleNonNullable: ComplexObjectNonNullable = {\n  simple: 5,\n  nested: {\n    a: \"test\",\n    array: [{ bar: null }], // Error: Type 'null' is not assignable to type 'number'\n  },\n};\n\ntype ComplexObjectNullable = DeepNullable<ComplexObject>;\nconst sampleDeepNullable1: ComplexObjectNullable = {\n  simple: null,\n  nested: {\n    a: null,\n    array: [{ bar: null }],\n  },\n};\nconst sampleDeepNullable2: ComplexObjectNullable = {\n  simple: 1,\n  nested: {\n    array: [null], // OK\n    // error -- property `a` missing, should be `number | null`\n  },\n};\n\n// DeepUndefinable will come in handy if:\n//  - you want to explicitly assign values to all of the properties\n//  AND\n//  - the expression used for the assignment can return an `undefined` value\n// In most situations DeepPartial will suffice.\ndeclare function tryGet(name: string): string | undefined;\ntype ComplexObjectUndefinable = DeepUndefinable<ComplexObject>;\nconst sampleDeepUndefinable1: ComplexObjectUndefinable = {\n  simple: undefined,\n  nested: {\n    a: tryGet(\"a-value\"),\n    array: [{ bar: tryGet(\"bar-value\") }],\n  },\n};\nconst sampleDeepUndefinable2: ComplexObjectUndefinable = {\n  // error -- property `simple` missing, should be `number | undefined`\n  nested: {\n    array: [[{ bar: undefined }]],\n    // error -- property `a` missing, should be `string | undefined`\n  },\n};\n```\n\n### Writable\n\nMake all attributes of object writable.\n\n```typescript\ntype Foo = {\n  readonly a: number;\n  readonly b: string;\n};\n\nconst foo: Foo = { a: 1, b: \"b\" };\n(foo as Writable<typeof foo>).a = 42;\n```\n\n```typescript\ntype Foo = {\n  readonly foo: string;\n  bar: {\n    readonly x: number;\n  };\n}[];\n\nconst test: DeepWritable<Foo> = [\n  {\n    foo: \"a\",\n    bar: {\n      x: 5,\n    },\n  },\n];\n\n// we can freely write to this object\ntest[0].foo = \"b\";\ntest[0].bar.x = 2;\n```\n\n### Buildable\n\n_keywords: builder_\n\nA combination of both `DeepWritable` and `DeepPartial`. This type allows building an object step-by-step by assigning\nvalues to its attributes in multiple statements.\n\n```typescript\ninterface ReadonlyObject\n  extends Readonly<{\n    simple: number;\n    nested: Readonly<{\n      a: string;\n      array: ReadonlyArray<Readonly<{ bar: number }>>;\n    }>;\n  }> {}\n\nconst buildable: Buildable<ReadonlyObject> = {};\nbuildable.simple = 7;\nbuildable.nested = {};\nbuildable.nested.a = \"test\";\nbuildable.nested.array = [];\nbuildable.nested.array.push({ bar: 1 });\nconst finished = buildable as ReadonlyObject;\n```\n\n### Omit\n\nOur version of `Omit` is renamed to `StrictOmit` in `v3`, since the builtin `Omit` has become part of TypeScript 3.5\n\n### StrictOmit\n\nUsage is similar to the builtin version, but checks the filter type more strictly.\n\n```typescript\ntype ComplexObject = {\n  simple: number;\n  nested: {\n    a: string;\n    array: [{ bar: number }];\n  };\n};\n\ntype SimplifiedComplexObject = StrictOmit<ComplexObject, \"nested\">;\n\n// Result:\n// {\n//  simple: number\n// }\n\n// if you want to Omit multiple properties just use union type:\ntype SimplifiedComplexObject = StrictOmit<ComplexObject, \"nested\" | \"simple\">;\n\n// Result:\n// { } (empty type)\n```\n\n#### Comparison between `Omit` and `StrictOmit`\n\nFollowing the code above, we can compare the behavior of `Omit` and `StrictOmit`.\n\n```typescript\ntype SimplifiedComplexObjectWithStrictOmit = StrictOmit<ComplexObject, \"nested\" | \"simple\" | \"nonexistent\">;\n\n// Result: error\n// Type '\"simple\" | \"nested\" | \"nonexistent\"' does not satisfy the constraint '\"simple\" | \"nested\"'.\n// Type '\"nonexistent\"' is not assignable to type '\"simple\" | \"nested\"'.\n\ntype SimplifiedComplexObjectWithOmit = Omit<ComplexObject, \"nested\" | \"simple\" | \"nonexistent\">;\n\n// Result: no error\n```\n\nAs is shown in the example, `StrictOmit` ensures that no extra key is specified in the filter.\n\n### DeepOmit\n\nRecursively omit deep properties according to key names.\n\nHere is the `Teacher` interface.\n\n```typescript\ninterface Teacher {\n  name: string;\n  gender: string;\n  students: { name: string; score: number }[];\n}\n```\n\nNow suppose you want to omit `gender` property of `Teacher`, and `score` property of `students`. You can achieve this\nwith a simple type filter.\n\nIn the filter, the properties to be omitted completely should be defined as `never`. For the properties you want to\npartially omit, you should recursively define the sub-properties to be omitted.\n\n```typescript\ntype TeacherSimple = DeepOmit<\n  Teacher,\n  {\n    gender: never;\n    students: {\n      score: never;\n    };\n  }\n>;\n\n// The result will be:\n// {\n//  name: string,\n//  students: {name: string}[]\n// }\n```\n\nNOTE\n\n- `DeepOmit` works fine with `Array`s and `Set`s. When applied to a `Map`, the filter is only applied to its value.\n- If there exists any property in the filter which is not in the original type, an error will occur.\n\n### OmitProperties\n\n_keywords: filter, props_\n\nRemoves all properties extending type `P` in type `T`. NOTE: it works opposite to filtering.\n\n```typescript\ninterface Example {\n  log(): void;\n  version: string;\n}\n\ntype ExampleWithoutMethods = OmitProperties<Example, Function>;\n\n// Result:\n// {\n//   version: string;\n// }\n\n// if you want to Omit multiple properties just use union type like\n\ntype ExampleWithoutMethods = OmitProperties<Example, Function | string>;\n// Result:\n// { } (empty type)\n```\n\n### PickProperties\n\nPick only properties extending type `P` in type `T`.\n\n```typescript\ninterface Example {\n  log(): void;\n  version: string;\n  versionNumber: number;\n}\n\ntype ExampleOnlyMethods = PickProperties<Example, Function>;\n\n// Result:\n// {\n//   log(): void;\n// }\n\n// if you want to pick multiple properties just use union type like\n\ntype ExampleOnlyMethodsAndString = PickProperties<Example, Function | string>;\n// Result:\n// {\n//   log(): void;\n//   version: string;\n// }\n```\n\n### NonNever\n\nUseful for purifying object types. It improves intellisense but also allows for extracting keys satisfying a conditional\ntype.\n\n```typescript\ntype GetDefined<TypesMap extends { [key: string]: any }> = keyof NonNever<\n  { [T in keyof TypesMap]: TypesMap[T] extends undefined ? never : TypesMap[T] }\n>;\n```\n\n### NonEmptyObject\n\nUseful for accepting only objects with keys, great after a filter like OmitProperties or PickProperties.\n\n```typescript\n/* return never if the object doesn't have any number value*/\ntype NumberDictionary<T> = NonEmptyObject<PickProperties<T, number>>;\n\n// return { a: number }\ntype SomeObject = NumberDictionary<{ a: number; b: string }>;\n\n// return never\ntype EmptyObject = NumberDictionary<{}>;\n```\n\n### Merge\n\n_keywords: override_\n\n```typescript\ntype Foo = {\n  a: number;\n  b: string;\n};\n\ntype Bar = {\n  b: number;\n};\n\nconst xyz: Merge<Foo, Bar> = { a: 4, b: 2 };\n// Result:\n// {\n//   a: number,\n//   b: number,\n// }\n```\n\n### MarkRequired\n\nUseful when you're sure some optional properties will be set. A real life example: when selecting an object with its\nrelated entities from an ORM.\n\n```typescript\nclass User {\n  id: number;\n  posts?: Post[];\n  photos?: Photo[];\n}\ntype UserWithPosts = MarkRequired<User, \"posts\">;\n\n// example usage with a TypeORM repository -- `posts` are now required, `photos` are still optional\nasync function getUserWithPosts(id: number): Promise<UserWithPosts> {\n  return userRepo.findOneOrFail({ id }, { relations: [\"posts\"] }) as Promise<UserWithPosts>;\n}\n```\n\n### MarkOptional\n\nUseful when you want to make some properties optional without creating a separate type.\n\n```typescript\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  password: string;\n}\n\ntype UserWithoutPassword = MarkOptional<User, \"password\">;\n\n// Result:\n\n// {\n//   id: number;\n//   name: string;\n//   email: string;\n//   password?: string;\n// }\n```\n\n### ReadonlyKeys\n\nGets keys of an object which are readonly.\n\n```typescript\ntype T = {\n  readonly a: number;\n  b: string;\n};\ntype Result = ReadonlyKeys<T>;\n// Result:\n// \"a\"\n```\n\n### WritableKeys\n\nGets keys of an object which are writable.\n\n```typescript\ntype T = {\n  readonly a: number;\n  b: string;\n};\ntype Result = WritableKeys<T>;\n// Result:\n// \"b\"\n```\n\n### OptionalKeys\n\nGets keys of an object which are optional.\n\n```typescript\ntype T = {\n  a: number;\n  b?: string;\n  c: string | undefined;\n  d?: string;\n};\ntype Result = OptionalKeys<T>;\n// Result:\n// \"b\" | \"d\"\n```\n\n### RequiredKeys\n\nGets keys of an object which are required.\n\n```typescript\ntype T = {\n  a: number;\n  b?: string;\n  c: string | undefined;\n  d?: string;\n};\ntype Result = RequiredKeys<T>;\n// Result:\n// \"a\" | \"c\"\n```\n\n### PickKeys\n\nGets keys of properties of given type in object type.\n\n```typescript\ntype T = {\n  a: number;\n  b?: string;\n  c: string | undefined;\n  d: string;\n};\ntype Result1 = PickKeys<T, string>;\n// Result1:\n// \"d\"\ntype Result2 = PickKeys<T, string | undefined>;\n// Result2:\n// \"b\" | \"c\" | \"d\"\n```\n\n### UnionToIntersection\n\nUseful for converting mapped types with function values to intersection type (so in this case - overloaded function).\n\n```typescript\ntype Foo = {\n  bar: string;\n  xyz: number;\n};\n\ntype Fn = UnionToIntersection<{ [K in keyof Foo]: (type: K, arg: Foo[K]) => any }[keyof Foo]>;\n```\n\n### Opaque types\n\nOpaque types allow you to create unique type that can't be assigned to base type by accident. Good examples of opaque\ntypes include:\n\n- JWTs or other tokens - these are special kinds of string used for authorization purposes. If your app uses multiple\n  types of tokens each should be a separate opaque type to avoid confusion.\n- specific currencies - amount of different currencies shouldn't be mixed\n- bitcoin address - special kind of string\n\nIt's **critical** to understand that each token (second argument to `Opaque`) has to be unique across your codebase.\n\nWe encourage you to leverage a pattern where you have single function to validate base type and create opaque type.\n\n```typescript\ntype PositiveNumber = Opaque<number, \"PositiveNumber\">;\nfunction makePositiveNumber(n: number): PositiveNumber {\n  if (n <= 0) {\n    throw new Error(`Value ${n} is not positive !`);\n  }\n  return (n as any) as PositiveNumber; // this ugly cast is required but only when \"producing\" opaque types\n}\n\ntype NegativeNumber = Opaque<number, \"NegativeNumber\">;\nfunction makeNegativeNumber(n: number): NegativeNumber {\n  if (n >= 0) {\n    throw new Error(`Value ${n} is not negative !`);\n  }\n  return (n as any) as NegativeNumber; // this ugly cast is required but only when \"producing\" opaque types\n}\n\nlet a = makePositiveNumber(5); // runtime check\nlet b = makeNegativeNumber(-10); // runtime check\n\na = b; // error at compile time\n```\n\n### Tuple constraint\n\n```typescript\nfunction foo<T extends Tuple>(tuple: T): T {\n  return tuple;\n}\n\nconst ret = foo([\"s\", 1]);\n// return type of [string, number]\n```\n\nYou can also parametrize `Tuple` type with a type argument to constraint it to certain types, i.e.\n`Tuple<string | number>`.\n\n### Exhaustive switch cases\n\n```typescript\nfunction actOnDummyOptions(options: DummyOptions): string {\n  switch (options) {\n    case \"open\":\n      return \"it's open!\";\n    case \"closed\":\n      return \"it's closed\";\n    case \"unknown\":\n      return \"i have no idea\";\n    default:\n      // if you would add another option to DummyOptions, you'll get error here!\n      throw new UnreachableCaseError(options);\n  }\n}\n```\n\n### ValueOf type\n\n```typescript\nconst obj = {\n  id: \"123e4567-e89b-12d3-a456-426655440000\",\n  name: \"Test object\",\n  timestamp: 1548768231486,\n};\n\ntype objKeys = ValueOf<typeof obj>;\n// Result: string | number\n```\n\n### ElementOf type\n\n```typescript\nconst array = [1, 2, true, false];\ntype arrayElement = ElementOf<typeof array>;\n// Result: number | boolean\n```\n\n### AsyncOrSync type\n\nUseful as a return type in interfaces or abstract classes with missing implementation\n\n```typescript\ninterface CiProvider {\n  getSHA(): AsyncOrSync<string>;\n  // same as\n  getSHA(): Promise<string> | string;\n}\n\nclass Circle implements CiProvider {\n  // implementation can use sync version\n  getSHA() {\n    return \"abc\";\n  }\n}\n\nclass Travis implements CiProvider {\n  // implementation can use async version when needed\n  async getSHA() {\n    // do async call\n    return \"def\";\n  }\n}\n\n// to get original type use AsyncOrSyncType\nAsyncOrSyncType<AsyncOrSync<number>> // return 'number'\n```\n\n### Awaited type\n\nUnwrap promised type:\n\n```typescript\nAwaited<Promise<number>> // number\n```\n\n### Newable\n\n_keywords: constructor, class_\n\nType useful when working with classes (not their instances).\n\n```typescript\nclass TestCls {\n  constructor(arg1: string) {}\n}\n\nconst t1: Newable<any> = TestCls;\n```\n\n### Assertions\n\n_keywords: invariant_\n\nSimple runtime assertion that narrows involved types using\n[assertion functions](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions).\n\nNote: This function is not purely type level and leaves minimal runtime trace in generated code.\n\n```typescript\nconst something: string | undefined = \"abc\" as any;\nassert(something, \"Something has to be defined!\");\n// from now on `something` is string, if this wouldn't be a case, assert would throw\n\nconst anything = \"abc\" as any;\nassert(anything instanceof String, \"anything has to be a string!\");\n// from now on `anything` is string\n```\n\n### Exact\n\n_keywords: same, equals, equality_\n\n`Exact<TYPE, SHAPE>` Checks if `TYPE` is exactly the same as `SHAPE`, if yes than `TYPE` is returned otherwise `never`.\n\n```typescript\ntype ABC = { a: number; b: number; c: number }\ntype BC = { b: number; c: number }\ntype C = { c: number }\n\nExact<ABC, C> // returns NEVER\nExact<C, C> // returns C\n```\n\n### XOR\n\nGets the XOR (Exclusive-OR) type which could make 2 types exclude each other.\n\n```typescript\ntype A = { a: string };\ntype B = { a: number; b: boolean };\ntype C = { c: number };\n\nlet A_XOR_B: XOR<A, B>;\nlet A_XOR_C: XOR<A, C>;\n\n// fail\nA_XOR_B = { a: 0 };\nA_XOR_B = { b: true };\nA_XOR_B = { a: \"\", b: true };\nA_XOR_C = { a: \"\", c: 0 }; // would be allowed with `A | C` type\n\n// ok\nA_XOR_B = { a: 0, b: true };\nA_XOR_B = { a: \"\" };\nA_XOR_C = { c: 0 };\n```\n\n### Functional type essentials\n\n`Head` & `Tail`: useful for functional programming, or as building blocks for more complex functional types.\n\n```typescript\nfunction tail<T extends any[]>(array: T): Tail<T> {\n  return array.slice(1) as Tail<T>;\n}\n\ntype FirstParameter<FnT extends (...args: any) => any> = FnT extends (...args: infer ArgsT) => any\n  ? Head<ArgsT>\n  : never;\n```\n\n## Contributors\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://twitter.com/krzkaczor\"><img src=\"https://avatars2.githubusercontent.com/u/1814312?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Chris Kaczor</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=krzkaczor\" title=\"Code\">ðŸ’»</a> <a href=\"#business-krzkaczor\" title=\"Business development\">ðŸ’¼</a> <a href=\"#example-krzkaczor\" title=\"Examples\">ðŸ’¡</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=krzkaczor\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://scholar.google.com/citations?user=3xZtvpAAAAAJ\"><img src=\"https://avatars3.githubusercontent.com/u/9780746?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Xiao Liang</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=yxliang01\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-yxliang01\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=yxliang01\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Andarist\"><img src=\"https://avatars2.githubusercontent.com/u/9800850?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mateusz BurzyÅ„ski</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=Andarist\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-Andarist\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=Andarist\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/macbem\"><img src=\"https://avatars1.githubusercontent.com/u/12464061?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Maciej Bembenista</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=macbem\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-macbem\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=macbem\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/MichaelTontchev\"><img src=\"https://avatars0.githubusercontent.com/u/12261336?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Michael Tontchev</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=MichaelTontchev\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-MichaelTontchev\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=MichaelTontchev\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"http://ThomasdH.blogspot.com\"><img src=\"https://avatars0.githubusercontent.com/u/3889750?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Thomas den Hollander</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=ThomasdenH\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-ThomasdenH\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=ThomasdenH\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/esamatti\"><img src=\"https://avatars3.githubusercontent.com/u/225712?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esa-Matti Suuronen</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=epeli\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-epeli\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=epeli\" title=\"Documentation\">ðŸ“–</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/IlyaSemenov\"><img src=\"https://avatars1.githubusercontent.com/u/128121?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ilya Semenov</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=IlyaSemenov\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-IlyaSemenov\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=IlyaSemenov\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://codechecks.io\"><img src=\"https://avatars2.githubusercontent.com/u/46399828?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Code Checks</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/pulls?q=is%3Apr+reviewed-by%3Acodechecks\" title=\"Reviewed Pull Requests\">ðŸ‘€</a></td>\n    <td align=\"center\"><a href=\"http://www.nomiclabs.io\"><img src=\"https://avatars1.githubusercontent.com/u/176499?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Patricio Palladino</b></sub></a><br /><a href=\"#ideas-alcuadrado\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a></td>\n    <td align=\"center\"><a href=\"http://twitter.com/quezak2\"><img src=\"https://avatars0.githubusercontent.com/u/666206?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Artur Kozak</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=quezak\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-quezak\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=quezak\" title=\"Documentation\">ðŸ“–</a> <a href=\"https://github.com/krzkaczor/ts-essentials/pulls?q=is%3Apr+reviewed-by%3Aquezak\" title=\"Reviewed Pull Requests\">ðŸ‘€</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lucifer1004\"><img src=\"https://avatars2.githubusercontent.com/u/13583761?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zihua Wu</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=lucifer1004\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-lucifer1004\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=lucifer1004\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"http://kevinpeno.com\"><img src=\"https://avatars1.githubusercontent.com/u/343808?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kevin Peno</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=kevinpeno\" title=\"Code\">ðŸ’»</a></td>\n    <td align=\"center\"><a href=\"https://github.com/DomParfitt\"><img src=\"https://avatars2.githubusercontent.com/u/11363907?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Dom Parfitt</b></sub></a><br /><a href=\"#ideas-DomParfitt\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/EduardoRFS\"><img src=\"https://avatars0.githubusercontent.com/u/3393115?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>EduardoRFS</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=EduardoRFS\" title=\"Code\">ðŸ’»</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=EduardoRFS\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://andydvorak.net/\"><img src=\"https://avatars1.githubusercontent.com/u/409245?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrew C. Dvorak</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=acdvorak\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/a1russell\"><img src=\"https://avatars0.githubusercontent.com/u/241628?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Adam Russell</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=a1russell\" title=\"Code\">ðŸ’»</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=a1russell\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sz-piotr\"><img src=\"https://avatars2.githubusercontent.com/u/17070569?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Piotr Szlachciak</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=sz-piotr\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-sz-piotr\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=sz-piotr\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mikhailswift\"><img src=\"https://avatars3.githubusercontent.com/u/3218582?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mikhail Swift</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=mikhailswift\" title=\"Code\">ðŸ’»</a></td>\n    <td align=\"center\"><a href=\"https://github.com/DevilZh\"><img src=\"https://avatars1.githubusercontent.com/u/10295215?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ryan Zhang</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=DevilZh\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-DevilZh\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=DevilZh\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/francesco-borzi/\"><img src=\"https://avatars1.githubusercontent.com/u/75517?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Francesco BorzÃ¬</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=FrancescoBorzi\" title=\"Documentation\">ðŸ“–</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=FrancescoBorzi\" title=\"Code\">ðŸ’»</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/leaumar\"><img src=\"https://avatars2.githubusercontent.com/u/3950300?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marnick L'Eau</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=leaumar\" title=\"Code\">ðŸ’»</a> <a href=\"#ideas-leaumar\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=leaumar\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kubk\"><img src=\"https://avatars1.githubusercontent.com/u/22447849?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>kubk</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=kubk\" title=\"Code\">ðŸ’»</a></td>\n    <td align=\"center\"><a href=\"https://github.com/bbarry\"><img src=\"https://avatars0.githubusercontent.com/u/84951?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Bill Barry</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=bbarry\" title=\"Code\">ðŸ’»</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=bbarry\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/akwodkiewicz\"><img src=\"https://avatars2.githubusercontent.com/u/22861194?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Andrzej WÃ³dkiewicz</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=akwodkiewicz\" title=\"Code\">ðŸ’»</a> <a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=akwodkiewicz\" title=\"Documentation\">ðŸ“–</a> <a href=\"#ideas-akwodkiewicz\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a></td>\n    <td align=\"center\"><a href=\"http://chjdev.com\"><img src=\"https://avatars2.githubusercontent.com/u/973941?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Christian</b></sub></a><br /><a href=\"#ideas-chjdev\" title=\"Ideas, Planning, & Feedback\">ðŸ¤”</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mattleff\"><img src=\"https://avatars0.githubusercontent.com/u/120155?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Leffler</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=mattleff\" title=\"Documentation\">ðŸ“–</a></td>\n    <td align=\"center\"><a href=\"https://github.com/studds\"><img src=\"https://avatars2.githubusercontent.com/u/3046407?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>studds</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=studds\" title=\"Code\">ðŸ’»</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/Beraliv\"><img src=\"https://avatars.githubusercontent.com/u/2991847?v=4?s=100\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alex Berezin</b></sub></a><br /><a href=\"https://github.com/krzkaczor/ts-essentials/commits?author=Beraliv\" title=\"Code\">ðŸ’»</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification.\nContributions of any kind welcome! [Read more](./CONTRIBUTING.md)\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2018-2019 Chris Kaczor (github.com/krzkaczor)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ts-essentials/-/ts-essentials-7.0.3.tgz#686fd155a02133eedcc5362dc8b5056cde3e5a38",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ts-essentials/-/ts-essentials-7.0.3.tgz",
    "hash": "686fd155a02133eedcc5362dc8b5056cde3e5a38",
    "integrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ==",
    "registry": "npm",
    "packageName": "ts-essentials",
    "cacheIntegrity": "sha512-8+gr5+lqO3G84KdiTSMRLtuyJ+nTBVRKuCrK4lidMPdVeEp0uqC875uE5NMcaA7YYMN7XsNiFQuMvasF8HT/xQ== sha1-aG/RVaAhM+7cxTYtyLUFbN4+Wjg="
  },
  "registry": "npm",
  "hash": "686fd155a02133eedcc5362dc8b5056cde3e5a38"
}