{
  "manifest": {
    "name": "glsl-tokenizer",
    "version": "2.1.5",
    "description": "r/w stream of glsl tokens",
    "main": "string.js",
    "authors": [
      "Hugh Kennedy <hughskennedy@gmail.com> (http://hughsk.io/)",
      "Mikola Lysenko <mikolalysenko@gmail.com> (http://0fps.net)",
      "Chris Dickinson <chris@neversaw.us> (http://neversaw.us)"
    ],
    "scripts": {
      "test": "node test/index.js | tap-spec"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/gl-modules/glsl-tokenizer.git"
    },
    "keywords": [
      "glsl",
      "tokenizer",
      "stream"
    ],
    "author": {
      "name": "Chris Dickinson",
      "email": "chris@neversaw.us"
    },
    "license": "MIT",
    "dependencies": {
      "through2": "^0.6.3"
    },
    "devDependencies": {
      "tap-spec": "^1.0.1",
      "tape": "^3.0.2"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-glsl-tokenizer-2.1.5-1c2e78c16589933c274ba278d0a63b370c5fee1a-integrity/node_modules/glsl-tokenizer/package.json",
    "readmeFilename": "README.md",
    "readme": "# glsl-tokenizer [![Build Status](https://travis-ci.org/glslify/glsl-tokenizer.svg?branch=master)](https://travis-ci.org/glslify/glsl-tokenizer)\n\nMaps GLSL string data into GLSL tokens, either synchronously or using a\nstreaming API.\n\n``` javascript\nvar tokenString = require('glsl-tokenizer/string')\nvar tokenStream = require('glsl-tokenizer/stream')\nvar fs = require('fs')\n\n// Synchronously:\nvar tokens = tokenString(fs.readFileSync('some.glsl'))\n\n// Streaming API:\nfs.createReadStream('some.glsl')\n  .pipe(tokenStream())\n  .on('data', function(token) {\n    console.log(token.data, token.position, token.type)\n  })\n```\n\n# API\n\n## tokens = require('glsl-tokenizer/string')(src, [opt])\n\nReturns an array of `tokens` given the GLSL source string `src`\n\nYou can specify `opt.version` string to use different keywords/builtins, such as `'300 es'` for WebGL2. Otherwise, will assume GLSL 100 (WebGL1).\n\n```js\nvar tokens = tokenizer(src, {\n  version: '300 es'\n})\n```\n\n## stream = require('glsl-tokenizer/stream')([opt])\n\nEmits 'data' events whenever a token is parsed with a token object as output.\n\nAs above, you can specify `opt.version`.\n\n# Tokens\n\n```javascript\n{ 'type': TOKEN_TYPE\n, 'data': \"string of constituent data\"\n, 'position': integer position within the GLSL source\n, 'line': line number within the GLSL source\n, 'column': column number within the GLSL source }\n```\n\nThe available token types are:\n\n* `block-comment`: `/* ... */`\n* `line-comment`: `// ... \\n`\n* `preprocessor`: `# ... \\n`\n* `operator`: Any operator. If it looks like punctuation, it's an operator.\n* `float`: Optionally suffixed with `f`\n* `ident`: User defined identifier.\n* `builtin`: Builtin function.\n* `eof`: Emitted on `end`; data will === `'(eof)'`.\n* `integer`\n* `whitespace`\n* `keyword`\n\n# License\n\nMIT, see [LICENSE.md](LICENSE.md) for further information.\n",
    "licenseText": "The MIT License (MIT)\n=====================\n\nCopyright (c) 2014 [Chris Dickinson](http://github.com/chrisdickinson)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/glsl-tokenizer/-/glsl-tokenizer-2.1.5.tgz#1c2e78c16589933c274ba278d0a63b370c5fee1a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/glsl-tokenizer/-/glsl-tokenizer-2.1.5.tgz",
    "hash": "1c2e78c16589933c274ba278d0a63b370c5fee1a",
    "integrity": "sha512-XSZEJ/i4dmz3Pmbnpsy3cKh7cotvFlBiZnDOwnj/05EwNp2XrhQ4XKJxT7/pDt4kp4YcpRSKz8eTV7S+mwV6MA==",
    "registry": "npm",
    "packageName": "glsl-tokenizer",
    "cacheIntegrity": "sha512-XSZEJ/i4dmz3Pmbnpsy3cKh7cotvFlBiZnDOwnj/05EwNp2XrhQ4XKJxT7/pDt4kp4YcpRSKz8eTV7S+mwV6MA== sha1-HC54wWWJkzwnS6J40KY7Nwxf7ho="
  },
  "registry": "npm",
  "hash": "1c2e78c16589933c274ba278d0a63b370c5fee1a"
}