{
  "manifest": {
    "name": "filtered-vector",
    "version": "1.2.5",
    "description": "Filter an input vector valued curve",
    "main": "fvec.js",
    "dependencies": {
      "binary-search-bounds": "^2.0.0",
      "cubic-hermite": "^1.0.0"
    },
    "devDependencies": {
      "array-almost-equal": "^1.0.0",
      "almost-equal": "0.0.0",
      "right-now": "^1.0.0",
      "tape": "^3.5.0"
    },
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mikolalysenko/filtered-vector.git"
    },
    "keywords": [
      "filter",
      "input",
      "curve",
      "device",
      "mouse"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mikolalysenko/filtered-vector/issues"
    },
    "homepage": "https://github.com/mikolalysenko/filtered-vector",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-filtered-vector-1.2.5-5a831278c159721dd3be34ef017842836ef3d461-integrity/node_modules/filtered-vector/package.json",
    "readmeFilename": "README.md",
    "readme": "filtered-vector\n===============\nApplies cubic smoothing to a vector valued curve.  This is useful for smoothing out inputs from the mouse or other input devices.\n\n# Example\n\n```javascript\nvar now = require('right-now')\nvar filterVector = require('filtered-vector')\nvar smoothPosition = filterVector([256, 256])\n\nvar canvas = document.createElement('canvas')\ncanvas.width = 512\ncanvas.height = 512\ndocument.body.appendChild(canvas)\nvar context = canvas.getContext('2d')\n\ncanvas.addEventListener('mousemove', function(ev) {\n  smoothPosition.push(now(), ev.x, ev.y)\n})\n\nfunction paint() {\n  requestAnimationFrame(paint)\n  var t = now()\n  context.fillStyle = 'rgba(0,0,0,1)'\n  context.fillRect(0,0,512,512)\n  \n  context.strokeStyle = '#0f0'\n  context.lineWidth = 1\n  context.beginPath()\n  var x = smoothPosition.curve(t)\n  context.moveTo(x[0], x[1])\n  for(var i=0; i<2000; ++i) {\n    var y = smoothPosition.curve(Math.floor(t - i))\n    context.lineTo(y[0], y[1])\n  }\n  context.stroke()\n}\npaint()\n```\n\n[Try out the demo in your browser.](https://mikolalysenko.github.io/filtered-vector)\n\n# Install\n\n```\nnpm i filtered-vector\n```\n\n# API\n\n## Constructor\n\n#### `var vec = require('filtered-vector')(initState[, initVelocity, initTime])`\nCreates a new smoothed vector with the given initial state, velocity and time.\n\n* `initState` is the initial state of the vector\n* `initVelocity` is the initial velocity of the vector\n* `initTime` is the initial time of the vector\n\n**Returns** A new smoothed vector valued curve\n\n## Methods\n\n#### `vec.curve(t)`\nComputes the value of the curve at time `t`\n\n* `t` is the time parameter to sample the curve\n\n**Returns** The value of the curve at time `t`\n\n#### `vec.dcurve(t)`\nComputes the derivative of the curve at time `t`\n\n* `t` is the time parameter\n\n**Returns** The derivative of the curve at time `t`\n\n#### `vec.bounds`\nA pair of arrays giving the upper and lower bounds on the constraints of the vector.  Default is `[-Infinity,-Infinity, ...]` and `[Infinity,Infinity,...]`\n\n#### `vec.push(t, ...)`\nAdds a new data point onto the end of the curve\n\n* `t` is the time the new data point was sampled\n* `...` are the components of the curve vector\n\n#### `vec.move(t, ...)`\nIncrementally moves the curve from the last sampled position by an offset.  This is useful with input devices that emit relative motion (for example scrolling, key press events, pointer lock)\n\n* `t` is the time at which the move event occured\n* `...` are the components of the relative motion\n\n#### `vec.set(t, ...)`\nSets the state of the curve at time `t`\n\n* `t` is the time parameter to sample\n* `...` are the components of the state\n\n#### `vec.jump(t, ...)`\nSets the state of the vector at time `t` with no smoothing.\n\n* `t` is the time parameter to sample\n* `...` are the components of the vector\n\n#### `vec.idle(t)`\nAdds a stationary data point to the curve (ie notify the curve that no input state has changed)\n\n* `t` is the time at which the curve was idle\n\n#### `vec.flush(t)`\nRemoves all samples in the buffer before time `t`\n\n* `t` is the cutoff time\n\n#### `vec.lastT()`\n\n**Returns** The time of the last sample in the curve\n\n#### `vec.stable()`\n\n**Returns** `true` is the vector is stationary as of the last event.\n\n# License\n(c) 2015 Mikola Lysenko.  MIT License",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2015 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/filtered-vector/-/filtered-vector-1.2.5.tgz#5a831278c159721dd3be34ef017842836ef3d461",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/filtered-vector/-/filtered-vector-1.2.5.tgz",
    "hash": "5a831278c159721dd3be34ef017842836ef3d461",
    "integrity": "sha512-5Vu6wdtQJ1O2nRmz39dIr9m3hEDq1skYby5k1cJQdNWK4dMgvYcUEiA/9j7NcKfNZ5LGxn8w2LSLiigyH7pTAw==",
    "registry": "npm",
    "packageName": "filtered-vector",
    "cacheIntegrity": "sha512-5Vu6wdtQJ1O2nRmz39dIr9m3hEDq1skYby5k1cJQdNWK4dMgvYcUEiA/9j7NcKfNZ5LGxn8w2LSLiigyH7pTAw== sha1-WoMSeMFZch3TvjTvAXhCg27z1GE="
  },
  "registry": "npm",
  "hash": "5a831278c159721dd3be34ef017842836ef3d461"
}