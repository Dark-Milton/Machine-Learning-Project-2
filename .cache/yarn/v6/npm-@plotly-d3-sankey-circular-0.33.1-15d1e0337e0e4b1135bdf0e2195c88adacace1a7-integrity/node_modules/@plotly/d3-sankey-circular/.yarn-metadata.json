{
  "manifest": {
    "name": "@plotly/d3-sankey-circular",
    "version": "0.33.1",
    "description": "D3 sankey with circular links",
    "author": {
      "name": "Tom Shanley"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/plotly/d3-sankey-circular.git"
    },
    "main": "dist/d3-sankey-circular.js",
    "module": "dist/d3-sankey-circular.es.js",
    "dependencies": {
      "d3-array": "^1.2.1",
      "d3-collection": "^1.0.4",
      "d3-shape": "^1.2.0",
      "elementary-circuits-directed-graph": "^1.0.4"
    },
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "babel-plugin-external-helpers": "^6.22.0",
      "babel-preset-env": "^1.7.0",
      "babelrc-rollup": "^3.0.0",
      "derequire": "^2.0.6",
      "eslint": "^4.19.1",
      "mkdirp": "^0.5.1",
      "rimraf": "^2.6.2",
      "rollup": "^0.59.4",
      "rollup-plugin-babel": "^3.0.4",
      "rollup-plugin-commonjs": "^9.1.3",
      "rollup-plugin-node-resolve": "^3.3.0",
      "uglify-js": "^3.1.3"
    },
    "babel": {
      "presets": [
        [
          "env",
          {
            "targets": {
              "node": "current"
            }
          }
        ]
      ]
    },
    "scripts": {
      "clean": "rimraf dist && mkdirp dist",
      "build": "rollup -c",
      "build:watch": "rollup -c -w",
      "build:clean": "npm run clean && npm run build",
      "prepare": "npm run build:clean",
      "lint": "./node_modules/.bin/eslint src/",
      "lint:fix": "./node_modules/.bin/eslint src/ --fix"
    },
    "files": [
      "dist"
    ],
    "keywords": [
      "d3"
    ],
    "bugs": {
      "url": "https://github.com/tomshanley/d3-sankey-circular/issues"
    },
    "homepage": "https://github.com/tomshanley/d3-sankey-circular#readme",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-@plotly-d3-sankey-circular-0.33.1-15d1e0337e0e4b1135bdf0e2195c88adacace1a7-integrity/node_modules/@plotly/d3-sankey-circular/package.json",
    "readmeFilename": "README.md",
    "readme": "# d3-sankey-circular\n\nA fork of the d3-sankey library (https://github.com/d3/d3-sankey) to allow circular links (ie cyclic graphs, like in [this example](https://bl.ocks.org/tomshanley/6f3fcf68c0dbc401548733dd0c64e3c3)).\n\nThe library contains a portion of code from Colin Fergus' bl.ock https://gist.github.com/cfergus/3956043 to detect circular links.\n\n## Install\n\nIf you use NPM, `npm install d3-sankey-circular`.\n\nElse, use the d3-sankey-circular.js file from the <a href=\"https://github.com/tomshanley/d3-sankey-circular/compiled\">compiled</a> folder.\n\n## Usage\n\nvar sankey = d3.sankeyCircular();\n\n## API Reference\n\n<b>*The API follows the original d3-sankey library, with additional options to allow the circular links to be laid out and drawn.*</b>\n\n<a href=\"#sankey\" name=\"sankey\">#</a> d3.<b>sankeyCircular</b>() [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L52 \"Source\")\n\nConstructs a new Sankey generator with the default settings.\n\n<a href=\"#_sankey\" name=\"_sankey\">#</a> <i>sankey</i>(<i>arguments</i>…) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L62 \"Source\")\n\nComputes the node and link positions for the given *arguments*, returning a *graph* representing the Sankey layout. The returned *graph* has the following properties:\n\n* *graph*.nodes - the array of [nodes](#sankey_nodes)\n* *graph*.links - the array of [links](#sankey_links)\n\n<a href=\"#sankey_update\" name=\"sankey_update\">#</a> <i>sankey</i>.<b>update</b>(<i>graph</i>)\n\nRecomputes the specified *graph*’s links’ positions, updating the following properties of each *link*:\n\n* *link*.y0 - the link’s vertical starting position (at source node)\n* *link*.y1 - the link’s vertical end position (at target node)\n* *link*.circularLinkType - the link's circularLinkType either *top* or *bottom*, depending on whether the center of the connected nodes is above or below the vertical midpoint of the figure.\n\nThis method is intended to be called after computing the initial [Sankey layout](#_sankey), for example when the diagram is repositioned interactively.\n\n<a name=\"sankey_nodes\" href=\"#sankey_nodes\">#</a> <i>sankey</i>.<b>nodes</b>([<i>nodes</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L93 \"Source\")\n\nIf *nodes* is specified, sets the Sankey generator’s nodes accessor to the specified function or array and returns this Sankey generator. If *nodes* is not specified, returns the current nodes accessor, which defaults to:\n\n```js\nfunction nodes(graph) {\n  return graph.nodes;\n}\n```\n\nIf *nodes* is specified as a function, the function is invoked when the Sankey layout is [generated](#_sankey), being passed any arguments passed to the Sankey generator. This function must return an array of nodes. If *nodes* is not a function, it must be a constant array of *nodes*.\n\nEach *node* must be an object. The following properties are assigned by the [Sankey generator](#_sankey):\n\n* *node*.sourceLinks - the array of outgoing [links](#sankey_links) which have this node as their source\n* *node*.targetLinks - the array of incoming [links](#sankey_links) which have this node as their target\n* *node*.value - the node’s value; the sum of *link*.value for the node’s incoming [links](#sankey_links)\n* *node*.index - the node’s zero-based index within the array of nodes\n* *node*.depth - the node’s zero-based graph depth, derived from the graph topology\n* *node*.column - the node’s zero-based depth, as drawn, going from left to right. Column is derived from *node*.depth and the [*sankey*.nodeAlign](#sankey_nodeAlign) setting.\n* *node*.height - the node’s zero-based graph height, derived from the graph topology\n* *node*.x0 - the node’s minimum horizontal position, derived from *node*.column\n* *node*.x1 - the node’s maximum horizontal position (*node*.x0 + [*sankey*.nodeWidth](#sankey_nodeWidth))\n* *node*.y0 - the node’s minimum vertical position\n* *node*.y1 - the node’s maximum vertical position (*node*.y1 - *node*.y0 is proportional to *node*.value)\n* *node*.partOfCycle - set to *true* if the node has incoming or outgoing links that are circular\n* *node*.circularLinkType - set to either *top* or *bottom*, if *node.partOfCycle* is *true*, which relates to whether circular links are drawn above or below the main part of the graph\n\nSee also [*sankey*.links](#sankey_links).\n\n<a name=\"sankey_links\" href=\"#sankey_links\">#</a> <i>sankey</i>.<b>links</b>([<i>links</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L97 \"Source\")\n\nIf *links* is specified, sets the Sankey generator’s links accessor to the specified function or array and returns this Sankey generator. If *links* is not specified, returns the current links accessor, which defaults to:\n\n```js\nfunction links(graph) {\n  return graph.links;\n}\n```\n\nIf *links* is specified as a function, the function is invoked when the Sankey layout is [generated](#_sankey), being passed any arguments passed to the Sankey generator. This function must return an array of links. If *links* is not a function, it must be a constant array of *links*.\n\nEach *link* must be an object with the following properties:\n\n* *link*.source - the link’s source [node](#sankey_nodes)\n* *link*.target - the link’s target [node](#sankey_nodes)\n* *link*.value - the link’s numeric value\n\nFor convenience, a link’s source and target may be initialized using numeric or string identifiers rather than object references; ; see [*sankey*.nodeId](#sankey_nodeId). The following properties are assigned to each link by the [Sankey generator](#_sankey):\n\n* *link*.y0 - the link’s vertical starting position (at source node)\n* *link*.y1 - the link’s vertical end position (at target node)\n* *link*.width - the link’s width (proportional to *link*.value)\n* *link*.index - the zero-based index of *link* within the array of links\n* *link*.circular - set to *true* if the link is circular\n\nFor any links that circular (*link*.circular = *true*), the following properties are assigned\n\n* *link*.circularLinkID - the zero-based index of *link* within the array of circular links\n* *link*.circularLinkType - set to either *top* or *bottom*, which relates to whether the link is drawn above or below the main part of the graph\n* *link*.circularLinkPathData - an object containing the properties used to draw the SVG path, including *link*.circularLinkPathData.path, which is the string used for the *d* property.\n\n<a name=\"sankey_nodeId\" href=\"#sankey_nodeId\">#</a> <i>sankey</i>.<b>nodeId</b>([<i>id</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L77 \"Source\")\n\nIf *id* is specified, sets the node id accessor to the specified function and returns this Sankey generator. If *id* is not specified, returns the current node id accessor, which defaults to the numeric *node*.index:\n\n```js\nfunction id(d) {\n  return d.index;\n}\n```\n\nThe default id accessor allows each link’s source and target to be specified as a zero-based index into the [nodes](#sankey_nodes) array. For example:\n\n```js\nvar nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nvar links = [\n  {\"source\": 0, \"target\": 1}, // Alice → Bob\n  {\"source\": 1, \"target\": 2} // Bob → Carol\n];\n```\n\nNow consider a different id accessor that returns a string:\n\n```js\nfunction id(d) {\n  return d.id;\n}\n```\n\nWith this accessor, you can use named sources and targets:\n\n```js\nvar nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nvar links = [\n  {\"source\": \"Alice\", \"target\": \"Bob\"},\n  {\"source\": \"Bob\", \"target\": \"Carol\"}\n];\n```\n\n<a name=\"sankey_nodeAlign\" href=\"#sankey_nodeAlign\">#</a> <i>sankey</i>.<b>nodeAlign</b>([<i>align</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L81 \"Source\")\n\nIf *align* is specified, sets the node [alignment method](#alignments) the specified function and returns this Sankey generator. If *align* is not specified, returns the current node alignment method, which defaults to [d3.sankeyJustify](#sankeyJustify). The specified function is evaluated for each input *node* in order, being passed the current *node* and the total depth *n* of the graph (one plus the maximum *node*.depth), and must return an integer between 0 and *n* - 1 that indicates the desired horizontal position of the node in the generated Sankey diagram.\n\n<a name=\"sankey_nodeWidth\" href=\"#sankey_nodeWidth\">#</a> <i>sankey</i>.<b>nodeWidth</b>([<i>width</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L85 \"Source\")\n\nIf *width* is specified, sets the node width to the specified number and returns this Sankey generator. If *width* is not specified, returns the current node width, which defaults to 24.\n\n<a name=\"sankey_nodePadding\" href=\"#sankey_nodePadding\">#</a> <i>sankey</i>.<b>nodePadding</b>([<i>padding</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L89 \"Source\")\n\nIf *padding* is specified, sets the vertical separation between nodes at each column to the specified number and returns this Sankey generator. If *padding* is not specified, returns the current node padding, which defaults to 8.\n\n<a name=\"sankey_nodePaddingRatio\" href=\"#sankey_nodePaddingRatio\">#</a> <i>sankey</i>.<b>nodePaddingRatio</b>([<i>proportion</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L89 \"Source\")\n\nIf *proportion* is specified (from 0 to 1), sets the vertical separation between nodes at each column to the specified number and returns this Sankey generator. The proportion is applied to the most dense column of nodes, and calculates a minimum padding that will be used across the chart.\n\nIf a nodePaddingRatio is not specified, then defaults to the *padding* setting in pixels.\n\n<a name=\"sankey_extent\" href=\"#sankey_extent\">#</a> <i>sankey</i>.<b>extent</b>([<i>extent</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L105 \"Source\")\n\nIf *extent* is specified, sets the extent of the Sankey layout to the specified bounds and returns the layout. The *extent* bounds are specified as an array \\[\\[<i>x0</i>, <i>y0</i>\\], \\[<i>x1</i>, <i>y1</i>\\]\\], where *x0* is the left side of the extent, *y0* is the top, *x1* is the right and *y1* is the bottom. If *extent* is not specified, returns the current extent which defaults to [[0, 0], [1, 1]].\n\n<a name=\"sankey_size\" href=\"#sankey_size\">#</a> <i>sankey</i>.<b>size</b>([<i>size</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L101 \"Source\")\n\nAn alias for [*sankey*.extent](#sankey_extent) where the minimum *x* and *y* of the extent are ⟨0,0⟩. Equivalent to:\n\n```js\nsankey.extent([[0, 0], size]);\n```\n\n<a name=\"sankey_iterations\" href=\"#sankey_iterations\">#</a> <i>sankey</i>.<b>iterations</b>([<i>iterations</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L109 \"Source\")\n\nIf *iterations* is specified, sets the number of relaxation iterations when [generating the layout](#_sankey) and returns this Sankey generator. If *iterations* is not specified, returns the current number of relaxation iterations, which defaults to 32.\n\n<a name=\"sankey_circularLinkGap\" href=\"#sankey_circularLinkGap\">#</a> <i>sankey</i>.<b>circularLinkGap</b>([<i>circularLinkGap</i>]) [<>](https://github.com/d3/d3-sankey/blob/master/src/sankey.js#L109 \"Source\")\n\nIf *circularLinkGap* is specified, sets the gap (in pixels) between circular links that travel next to each other. If *circularLinkGap*, it defaults to 2.\n\n### Alignments\n\nSee [*sankey*.nodeAlign](#sankey_nodeAlign).\n\n<a name=\"sankeyLeft\" href=\"#sankeyLeft\">#</a> d3.<b>sankeyLeft</b>(<i>node</i>, <i>n</i>)\n\nReturns *node*.depth.\n\n<a name=\"sankeyRight\" href=\"#sankeyRight\">#</a> d3.<b>sankeyRight</b>(<i>node</i>, <i>n</i>)\n\nReturns *n* - 1 - *node*.height.\n\n<a name=\"sankeyCenter\" href=\"#sankeyCenter\">#</a> d3.<b>sankeyCenter</b>(<i>node</i>, <i>n</i>)\n\nLike [d3.sankeyLeft](#sankeyLeft), except that nodes without any incoming links are moved as right as possible.\n\n<a name=\"sankeyJustify\" href=\"#sankeyJustify\">#</a> d3.<b>sankeyJustify</b>(<i>node</i>, <i>n</i>)\n\nLike [d3.sankeyLeft](#sankeyLeft), except that nodes without any outgoing links are moved to the far right.\n\n### Links\n\n<a name=\"d.path\" href=\"#d.path\">#</a> link<b>.path</b>[<>](https://github.com/d3/d3-sankey/blob/master/src/sankeyLinkHorizontal.js \"Source\")\n\nEach link has a .path property which stores the svg path **d** string, which can be accessed to draw the path, for example\n\n```js\n\nsvg.append(\"g\")\n    .attr(\"class\", \"links\")\n    .attr(\"fill\", \"none\")\n    .attr(\"stroke-opacity\", 0.2)\n    .selectAll(\"path\");\n    .data(sankey.links)\n    .enter()\n    .append(\"path\")\n        .attr(\"d\", function(d){\n          return d.path;\n        })\n        .style(\"stroke-width\", function (link) { link.width; })\n        .style(\"stroke\", function (link, i) {\n            return link.circular ? \"red\" : \"black\"\n        })\n```\n\nFor normal paths, the path string is created by the d3-shape linkHorizontal function. For circular paths, the path string is calculated to reduced overlaps with other nodes and paths.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Tom Shanley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@plotly/d3-sankey-circular/-/d3-sankey-circular-0.33.1.tgz#15d1e0337e0e4b1135bdf0e2195c88adacace1a7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@plotly/d3-sankey-circular/-/d3-sankey-circular-0.33.1.tgz",
    "hash": "15d1e0337e0e4b1135bdf0e2195c88adacace1a7",
    "integrity": "sha512-FgBV1HEvCr3DV7RHhDsPXyryknucxtfnLwPtCKKxdolKyTFYoLX/ibEfX39iFYIL7DYbVeRtP43dbFcrHNE+KQ==",
    "registry": "npm",
    "packageName": "@plotly/d3-sankey-circular",
    "cacheIntegrity": "sha512-FgBV1HEvCr3DV7RHhDsPXyryknucxtfnLwPtCKKxdolKyTFYoLX/ibEfX39iFYIL7DYbVeRtP43dbFcrHNE+KQ== sha1-FdHgM34OSxE1vfDiGVyIrays4ac="
  },
  "registry": "npm",
  "hash": "15d1e0337e0e4b1135bdf0e2195c88adacace1a7"
}