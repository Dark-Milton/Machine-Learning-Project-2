{
  "manifest": {
    "name": "regl-scatter2d",
    "version": "3.2.8",
    "description": "Scatter2d plot built with regl",
    "main": "./bundle.js",
    "scripts": {
      "postshrinkwrap": "chttps .",
      "test": "node test",
      "test-browser": "budo test -- -t glslify",
      "prepublishOnly": "npm run build",
      "build": "rollup -c rollup.config.js"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dy/regl-scatter2d.git"
    },
    "keywords": [
      "regl",
      "plotly"
    ],
    "browserslist": "> 0.25%, not dead",
    "author": {
      "name": "Dima Yv",
      "email": "df.creative@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dy/regl-scatter2d/issues"
    },
    "homepage": "https://github.com/dy/regl-scatter2d#readme",
    "dependencies": {
      "@plotly/point-cluster": "^3.1.9",
      "array-range": "^1.0.1",
      "array-rearrange": "^2.2.2",
      "clamp": "^1.0.1",
      "color-id": "^1.1.0",
      "color-normalize": "^1.5.0",
      "color-rgba": "^2.1.1",
      "flatten-vertex-data": "^1.0.2",
      "glslify": "^7.0.0",
      "image-palette": "^2.1.0",
      "is-iexplorer": "^1.0.0",
      "object-assign": "^4.1.1",
      "parse-rect": "^1.2.0",
      "pick-by-alias": "^1.2.0",
      "to-float32": "^1.1.0",
      "update-diff": "^1.1.0"
    },
    "devDependencies": {
      "@babel/core": "^7.2.2",
      "@babel/preset-env": "^7.2.3",
      "array-bounds": "^1.0.1",
      "chttps": "^1.0.6",
      "fps-indicator": "^1.3.0",
      "gl": "^4.1.1",
      "image-equal": "^4.3.1",
      "image-output": "^2.4.0",
      "image-pixels": "^2.2.0",
      "next-pow-2": "^1.0.0",
      "pxls": "^2.3.1",
      "regl": "^1.3.11",
      "rollup": "^1.1.0",
      "rollup-plugin-babel": "^4.2.0",
      "rollup-plugin-browserify-transform": "^1.0.1",
      "rollup-plugin-commonjs": "^9.2.0",
      "rollup-plugin-node-resolve": "^4.0.0",
      "seed-random": "^2.2.0",
      "tape": "^4.9.2"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-regl-scatter2d-3.2.8-a1360e803e3fdf628ca09a72a435a0b7d4cf5675-integrity/node_modules/regl-scatter2d/package.json",
    "readmeFilename": "readme.md",
    "readme": "# regl-scatter2d [![unstable](https://img.shields.io/badge/stability-unstable-green.svg)](http://github.com/badges/stability-badges)  [![Build Status](https://img.shields.io/travis/gl-vis/regl-scatter2d.svg)](https://travis-ci.org/gl-vis/regl-scatter2d)\n\nFast and precise 2d scatter plot for lots of points.\n\n![regl-scatter2d](https://github.com/gl-vis/regl-scatter2d/blob/master/preview.png?raw=true)\n\nRemake on [gl-scatter2d](https://github.com/gl-vis/gl-scatter2d), covering other scatter-related components.\n\n[Demo](https://gl-vis.github.io/regl-scatter2d).\n\n\n## Usage\n\n[![npm install regl-scatter2d](https://nodei.co/npm/regl-scatter2d.png?mini=true)](https://npmjs.org/package/regl-scatter2d/)\n\n```js\nlet regl = require('regl')({extensions: 'oes_element_index_uint'})\n\nlet createScatter = require('regl-scatter2d')\n\nlet scatter = createScatter(regl)\n\n//draw 5 points\nscatter({\n  positions: [0,0, 1,0, 2,0, 1,1, 2,1],\n  color: 'rgba(0, 100, 200, .75)'\n})\n```\n\n### `createScatter(regl)`\n\nCreate new scatter plot instance from `regl`. `regl` instance should have `OES_element_index_uint` extension enabled.\n\n### `scatter(optionsA, optionsB, ...rest)`\n\nDraw scatter points corresponding to options.\n\n```js\n// render multiple point groups\nscatter(\n  { points: [0,0, 1,1], color: 'blue', marker: null },\n  { points: [0,1, 1,0], color: 'red', marker: someSdf }\n)\n```\n\nOption | Default | Description\n---|---|---\n`positions`, `points` | `[]` | An array of the unrolled xy coordinates of the points as `[x,y, x,y, ...points]` or array of points `[[x,y], [x,y], ...points]`. Can be an object with `{x: [...xValues], y: [...yValues]}` planar values. For more precise memory control, like in matrix case, `x` or `y` can be an object of the form `{x: {buffer: reglBuffer, offset: value}}`, then the `reglBuffer` will be reused.\n`size`, `sizes` | `12` | Number or array with marker sizes in pixels. Array length should correspond to `positions`.\n`borderSize`, `borderSizes` | `1` | Number or array with border sizes in pixels. Array length should correspond to `positions`.\n`color`, `colors` | `'black'` | Color or array with colors. Each color can be a css color string or an array with float `0..1` values.\n`borderColor`, `borderColors` | `'transparent'` | Border color or array with border colors.\n`opacity` | `1` | Regulate marker transparency separately from colors.\n`marker`, `markers` | `null` | Marker SDF image, should be a rectangular array with `0..1` 1-channel values of signed distance field. Use [bitmap-sdf](https://github.com/dy/bitmap-sdf) or [svg-path-sdf](https://github.com/dy/svg-path-sdf) to generate distance array from a canvas, image or svg. `.5` value of distance corresponds to the border line. If `null`, circular marker is used.\n`range`, `dataBox` | `null` | Data bounds limiting visible data as `[left, top, right, bottom]`. If `null`, the range is detected as `positions` boundaries.\n`viewport`, `viewBox` | `null` | Bounding box limiting visible area within the canvas in pixels, can be an array `[left, top, right, bottom]` or an object `{left, top, right, bottom}` or `{x, y, w, h}`.\n`snap` | `null` | A bool, number of points threshold to enable snapping or [point-cluster](https://github.com/plotly/point-cluster) tree instance.\n\n### `scatter.update(optionsA, optionsB, ...rest)`\n\nUpdate options corresponding to passes, not incurring redraw. Passing `null` will remove previously loaded pass.\n\n```js\n// update 3 passes\nscatter.update(a, b, c)\n\n// update 1st pass, remove 2nd pass, ignore 3rd pass\nscatter.update(a, null)\n\n// update 2nd pass (former 3rd pass)\nscatter.update(null, b)\n\n// update n-th pass\nscatter.update.apply(scatter, Array.from({length: 10, 9: options}))\n```\n\n### `scatter.draw(id1|els1?, id2|els2?, ...)`\n\nDraw groups corresponding to `id`s, optionally specify marker ids to draw via `els`:\n\n```js\n// create 3 groups of points\nscatter.update(\n  {points: [0,1, 1,0], color: 'red', marker: squareSdf},\n  {points: [1,2, 2,1], color: 'green', marker: triangleSdf},\n  {points: [0,0, 1,1], color: 'blue', marker: null}\n)\n\n// draw all groups\nscatter.draw()\n\n// draw red group\nscatter.draw(0)\n\n// draw green and blue group\nscatter.draw(1, 2)\n\n// draw the second point of the blue group and the first point of the red group\nscatter.draw([1], null, [0])\n```\n\n### `scatter.destroy()`\n\nDispose scatter instance and associated resources.\n\n## Related\n\n* [regl-line2d](https://github.com/gl-vis/regl-line2d)\n* [regl-error2d](https://github.com/gl-vis/regl-error2d)\n\n## Similar\n\n* [pts](https://github.com/williamngan/pts)\n\n## License\n\nÂ© 2017 Dmitry Yv. MIT License\n\nDevelopment supported by [plot.ly](https://github.com/plotly/).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Dmitry Ivanov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/regl-scatter2d/-/regl-scatter2d-3.2.8.tgz#a1360e803e3fdf628ca09a72a435a0b7d4cf5675",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/regl-scatter2d/-/regl-scatter2d-3.2.8.tgz",
    "hash": "a1360e803e3fdf628ca09a72a435a0b7d4cf5675",
    "integrity": "sha512-bqrqJyeHkGBa9mEfuBnRd7FUtdtZ1l+gsM2C5Ugr1U3vJG5K3mdWdVWtOAllZ5FHHyWJV/vgjVvftgFUg6CDig==",
    "registry": "npm",
    "packageName": "regl-scatter2d",
    "cacheIntegrity": "sha512-bqrqJyeHkGBa9mEfuBnRd7FUtdtZ1l+gsM2C5Ugr1U3vJG5K3mdWdVWtOAllZ5FHHyWJV/vgjVvftgFUg6CDig== sha1-oTYOgD4/32KMoJpypDWgt9TPVnU="
  },
  "registry": "npm",
  "hash": "a1360e803e3fdf628ca09a72a435a0b7d4cf5675"
}