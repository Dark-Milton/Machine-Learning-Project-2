{
  "manifest": {
    "name": "array-normalize",
    "version": "1.1.4",
    "description": "Normalize array (possibly n-dimensional) to zero mean and unit variance",
    "main": "index.js",
    "scripts": {
      "test": "node test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dfcreative/array-normalize.git"
    },
    "keywords": [
      "array",
      "normalize",
      "normal",
      "statistics",
      "samples"
    ],
    "author": {
      "name": "Dima Yv",
      "email": "dfcreative@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dfcreative/array-normalize/issues"
    },
    "homepage": "https://github.com/dfcreative/array-normalize#readme",
    "dependencies": {
      "array-bounds": "^1.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-array-normalize-1.1.4-d75cec57383358af38efdf6a78071aa36ae4174c-integrity/node_modules/array-normalize/package.json",
    "readmeFilename": "readme.md",
    "readme": "# array-normalize  [![experimental](https://img.shields.io/badge/stability-unstable-yellow.svg)](http://github.com/badges/stability-badges) [![Build Status](https://img.shields.io/travis/dfcreative/array-normalize.svg)](https://travis-ci.org/dfcreative/array-normalize)\n\nNormalize array to unit length, that is 0..1 range. See [feature scaling](https://en.wikipedia.org/wiki/Feature_scaling).\n\n[![npm install array-normalize](https://nodei.co/npm/array-normalize.png?mini=true)](https://npmjs.org/package/array-normalize/)\n\n```js\nconst normalize = require('array-normalize')\n\nnormalize([0, 50, 100]) // [0, .5, 1]\nnormalize([0, 0, .1, .2, 1, 2], 2) // [0, 0, .1, .1, 1, 1]\nnormalize([0, .25, 1, .25], 2, [0, .5, 1, .5]) // [0, .5, 1, .5])\n```\n\n## API\n\n### array = normalize(array, dimensions=1, bounds?)\n\nNormalizes n-dimensional array in-place using `dimensions` as stride, ie. for 1d array the expected data layout is `[x, x, x, ...]` for 2d is `[x, y, x, y, ...]`, etc.\n\nEvery dimension is normalized independently, eg. 2d array is normalized to unit square `[0, 0, 1, 1]`.\n\nOptional `bounds` box can predefine min/max to optimize calculations.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/array-normalize/-/array-normalize-1.1.4.tgz#d75cec57383358af38efdf6a78071aa36ae4174c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/array-normalize/-/array-normalize-1.1.4.tgz",
    "hash": "d75cec57383358af38efdf6a78071aa36ae4174c",
    "integrity": "sha512-fCp0wKFLjvSPmCn4F5Tiw4M3lpMZoHlCjfcs7nNzuj3vqQQ1/a8cgB9DXcpDSn18c+coLnaW7rqfcYCvKbyJXg==",
    "registry": "npm",
    "packageName": "array-normalize",
    "cacheIntegrity": "sha512-fCp0wKFLjvSPmCn4F5Tiw4M3lpMZoHlCjfcs7nNzuj3vqQQ1/a8cgB9DXcpDSn18c+coLnaW7rqfcYCvKbyJXg== sha1-11zsVzgzWK84799qeAcao2rkF0w="
  },
  "registry": "npm",
  "hash": "d75cec57383358af38efdf6a78071aa36ae4174c"
}