{
  "manifest": {
    "name": "vectorize-text",
    "version": "3.2.2",
    "description": "Render a string to a vectorized cell complex",
    "main": "index.js",
    "dependencies": {
      "cdt2d": "^1.0.0",
      "clean-pslg": "^1.1.0",
      "ndarray": "^1.0.11",
      "planar-graph-to-polyline": "^1.0.6",
      "simplify-planar-graph": "^2.0.1",
      "surface-nets": "^1.0.0",
      "triangulate-polyline": "^1.0.0"
    },
    "devDependencies": {
      "get-pixels": "^3.1.0",
      "ndarray-imshow": "^1.0.0",
      "save-pixels": "^2.2.0",
      "tape": "^3.0.3"
    },
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/vectorize-text.git"
    },
    "keywords": [
      "vector",
      "text",
      "font",
      "rendering",
      "svg",
      "glyph"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mikolalysenko/vectorize-text/issues"
    },
    "homepage": "https://github.com/mikolalysenko/vectorize-text",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-vectorize-text-3.2.2-3e978889df4ae333975d38669529c942a63e1f65-integrity/node_modules/vectorize-text/package.json",
    "readmeFilename": "README.md",
    "readme": "vectorize-text\n==============\nConvert a string of text into a vectorized geometric representation. Works in both node.js and [browserify](http://browserify.org/).\n\n# Example\n\nThis module is capable of outputting geometry in several formats.\n\n### Planar graphs\n\nThe default (and fastest) output from the module is a planar graph:\n\n```javascript\nvar vectorizeText = require(\"vectorize-text\")\n\nvar graph = vectorizeText(\"Hello world! 你好\", {\n  width: 500,\n  textBaseline: \"hanging\"\n})\n\nvar svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"500\"  height=\"80\" >']\ngraph.edges.forEach(function(e) {\n  var p0 = graph.positions[e[0]]\n  var p1 = graph.positions[e[1]]\n  svg.push('<line x1=\"' + p0[0] + '\" y1=\"' + p0[1] +\n    '\" x2=\"' + p1[0] + '\" y2=\"' + p1[1] +\n    '\" stroke-width=\"1\" stroke=\"black\" />')\n})\nsvg.push(\"</svg>\")\n\nconsole.log(svg.join(\"\"))\n```\n\nOutput:\n\n<img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-graph.svg\">\n\n### Polygons\n\nYou can also configure the module to emit polygons instead:\n\n```javascript\nvar vectorizeText = require(\"vectorize-text\")\n\nvar polygons = vectorizeText(\"Hello world! 你好\", {\n  polygons: true,\n  width: 500,\n  textBaseline: \"hanging\"\n})\n\nvar svg = []\nsvg.push('<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"500\"  height=\"80\" >')\npolygons.forEach(function(loops) {\n  svg.push('<path d=\"')\n  loops.forEach(function(loop) {\n    var start = loop[0]\n    svg.push('M ' + start[0] + ' ' + start[1])\n    for(var i=1; i<loop.length; ++i) {\n      var p = loop[i]\n      svg.push('L ' + p[0] + ' ' + p[1])\n    }\n    svg.push('L ' + start[0] + ' ' + start[1])\n  })\n  svg.push('\" fill-rule=\"even-odd\" stroke-width=\"1\" fill=\"red\"></path>')\n})\nsvg.push('</svg>')\n\nconsole.log(svg)\n```\n\nOutput:\n\n<img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-polygon.svg\">\n\n\n### Triangulations\n\nFinally, the module can output a triangulation (which is compatible with WebGL for example):\n\n```javascript\nvar vectorizeText = require(\"vectorize-text\")\n\nvar complex = vectorizeText(\"Hello world! 你好\", {\n  triangles: true,\n  width: 500,\n  textBaseline: \"hanging\"\n})\n\nvar svg = ['<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"  width=\"500\"  height=\"80\" >']\ncomplex.cells.forEach(function(c) {\n  for(var j=0; j<3; ++j) {\n    var p0 = complex.positions[c[j]]\n    var p1 = complex.positions[c[(j+1)%3]]\n    svg.push('<line x1=\"' + p0[0] + '\" y1=\"' + p0[1] +\n      '\" x2=\"' + p1[0] + '\" y2=\"' + p1[1] +\n      '\" stroke-width=\"1\" stroke=\"black\" />')\n  }\n})\nsvg.push(\"</svg>\")\n\nconsole.log(svg)\n```\n\nOutput:\n\n<img src=\"https://mikolalysenko.github.io/vectorize-text/example/hello-triangles.svg\">\n\n# Install\n\n```sh\nnpm install vectorize-text\n```\n\n# API\n\n#### `require(\"vectorize-text\")(string[,options])`\nRenders a string to a 2D cell complex\n\n* `string` is a string of text (single line)\n* `options` is an optional object of parameters\n\n    + `options.font` is the font family to use (default: `\"normal\"`)\n    + `options.fontStyle` if set, determines the [font-style](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\n    + `options.fontVariant` if set, determines the [font-variant](https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant)\n    + `options.fontWeight` if set, determines the [font-weight](https://developer.mozilla.org/en/docs/Web/CSS/font-weight)\n    + `options.size` is the [font-size](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size) used for the rasterization step (determines level of detail of the mesh)\n    + `options.textBaseline` determines the baseline, same semantics as the canvas [textBaseline](https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#Attributes) property.  Default: `\"alphabetic\"`\n    + `options.textAlign` determines the alignment for the text, same semantics as canvas [textAlign](https://developer.mozilla.org/en-US/docs/Drawing_text_using_a_canvas#Attributes).  Default: `\"start\"`\n    + `options.lineHeight` determines the height of a line.  Default: `1.0`\n    + `options.width` determines the width of the text, overrides `lineHeight` if specified\n    + `options.height` determines the height of the text, overrides `lineHeight` if specified\n    + `options.triangles` if set, then output a triangulation\n    + `options.polygons` if set, output a list of polygons\n    + `options.orientation` determines the orientation of any output triangles/polygon curves.  Must be either `\"cw\"` for clockwise or `\"ccw\"` for counter clockwise.  Default is `\"cw\"`.\n    + `options.canvas` an optional canvas element\n    + `options.context` an optional canvas 2D context\n    + `options.styletags.breaklines` if set, break-line tags i.e. < br > could be used in the input to enter new lines.\n    + `options.styletags.bolds` if set, parts of the input i.e. between < b > and < /b > would be presented <b>bold</b>.\n    + `options.styletags.italics` if set, parts of the input i.e. between < i > and < /i > would be presented <i>italic</i>.\n    + `options.styletags.superscripts` if set, parts of the input i.e. between < sup > and < /sup > would be presented in as superscript. Multiple superscipts are also allowded. For example Line 0<sup>Line 1<sup>Line 2</sup></sup>.\n    + `options.styletags.subscripts` if set, parts of the input i.e. between < sub > and < /sub > would be presented in as subscript. Multiple subscipts are also allowded. For example: Line 0<sub>Line 1<sub>Line 2</sub></sub>. Note: it is also possible to combine sub and superscripts: A<sub>B<sup>C</sup></sub>.\n\n**Returns** The returned value depends on the type of geometry\n\n* *Planar graph*: This is the fastest output format. A JSON object encoding the embedding of an oriented planar graph, with the following properties:\n\n    + `edges` are the edges of the graph\n    + `positions` are the positions\n\n* *Polygon list*: A list of complex polygons encoded as arrays of positions.  This format is most suitable for SVG and GeoJSON output\n\n* *Triangulation*: This format may be most suitable for WebGL/rendering applications. A 2D oriented simplicial complex encoded as a list of cells and positions, represented by a JSON object with two properties\n\n    + `cells` are the faces of the triangulation, encoded as triples of indices into the vertex array\n    + `positions` are the positions of the vertices in the triangulation\n\n**Note** In node.js, this library requires Cairo. For more information on how to set this up, look at the documentation for the [canvas module](https://www.npmjs.org/package/canvas).\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License\n",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/vectorize-text/-/vectorize-text-3.2.2.tgz#3e978889df4ae333975d38669529c942a63e1f65",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/vectorize-text/-/vectorize-text-3.2.2.tgz",
    "hash": "3e978889df4ae333975d38669529c942a63e1f65",
    "integrity": "sha512-34NVOCpMMQVXujU4vb/c6u98h6djI0jGdtC202H4Huvzn48B6ARsR7cmGh1xsAc0pHNQiUKGK/aHF05VtGv+eA==",
    "registry": "npm",
    "packageName": "vectorize-text",
    "cacheIntegrity": "sha512-34NVOCpMMQVXujU4vb/c6u98h6djI0jGdtC202H4Huvzn48B6ARsR7cmGh1xsAc0pHNQiUKGK/aHF05VtGv+eA== sha1-PpeIid9K4zOXXThmlSnJQqY+H2U="
  },
  "registry": "npm",
  "hash": "3e978889df4ae333975d38669529c942a63e1f65"
}