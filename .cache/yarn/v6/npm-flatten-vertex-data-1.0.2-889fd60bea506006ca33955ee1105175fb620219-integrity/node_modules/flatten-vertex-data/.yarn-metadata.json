{
  "manifest": {
    "name": "flatten-vertex-data",
    "version": "1.0.2",
    "description": "flattens nested vertex data into a typed array",
    "main": "index.js",
    "license": "MIT",
    "author": {
      "name": "Matt DesLauriers",
      "email": "dave.des@gmail.com",
      "url": "https://github.com/mattdesl"
    },
    "dependencies": {
      "dtype": "^2.0.0"
    },
    "devDependencies": {
      "faucet": "0.0.1",
      "standard": "^5.3.1",
      "tape": "^4.9.0"
    },
    "scripts": {
      "test": "standard && node test.js | faucet"
    },
    "keywords": [
      "dtype",
      "flat",
      "flatten",
      "pack",
      "array",
      "type",
      "typed",
      "typedarray",
      "vert",
      "vertex",
      "webgl",
      "gl",
      "glsl",
      "shader",
      "buffer"
    ],
    "repository": {
      "type": "git",
      "url": "git://github.com/glo-js/flatten-vertex-data.git"
    },
    "homepage": "https://github.com/glo-js/flatten-vertex-data",
    "bugs": {
      "url": "https://github.com/glo-js/flatten-vertex-data/issues"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-flatten-vertex-data-1.0.2-889fd60bea506006ca33955ee1105175fb620219-integrity/node_modules/flatten-vertex-data/package.json",
    "readmeFilename": "README.md",
    "readme": "# flatten-vertex-data\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nCopies flat or nested array data into the specified typed array, or a new typed array. Intended to be used for WebGL buffers. If the input is nested array data, this guesses the dimensionality based on the length of the first sub-array.\n\n## Install\n\n```sh\nnpm install flatten-vertex-data --save\n```\n\n## Example\n\nAccepts a [dtype string](https://www.npmjs.com/package/dtype) (creating a new array) or an output typed array to re-use. Defaults to creating a new Float32Array.\n\n```js\nvar flatten = require('flatten-vertex-data')\n\nvar positions = [ [x1, y1], [x2, y2], [x3, y3] ]\n\nflatten(positions)\n//=> new Float32Array([ x1, y1, x2, y2, x3, y3 ])\n\nflatten(positions, 'uint16')\n//=> new Uint16Array([ x1, y1, x2, y2, x3, y3 ])\n\n// flatten & copy positions into output\nvar output = new Uint16Array(positions.length * 2)\nflatten(positions, output)\n```\n\n## Usage\n\n[![NPM](https://nodei.co/npm/flatten-vertex-data.png)](https://www.npmjs.com/package/flatten-vertex-data)\n\n#### `output = flatten(data, [output|type], [offset])`\n\nCopies flat or nested arrays into a typed array, where `data` can be:\n\n- a nested array like `[ [ x, y ], [ x, y ] ]`\n- a flat array like `[ x, y, z, x, y, z ]`\n- a typed array like `new Float32Array([ x, y ])`\n\nThe second parameter can be a `type` string for [dtype](https://www.npmjs.com/package/dtype), which creates a new array. Or, it can be an existing typed array to re-use as the `output` destination. It defaults to `'float32'` (a new Float32Array).\n\nReturns the `output` typed array.\n\nThe third parameter, `offset`, can be a number (default 0), the index in the destination array at which to start copying the `data`. If a new array is being created, its capacity will be expanded to fit `dataLength + offset` (i.e. it will have leading zeros).\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/glo-js/flatten-vertex-data/blob/master/LICENSE.md) for details.\n",
    "licenseText": "The MIT License (MIT)\nCopyright (c) 2015 glo-js\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/flatten-vertex-data/-/flatten-vertex-data-1.0.2.tgz#889fd60bea506006ca33955ee1105175fb620219",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/flatten-vertex-data/-/flatten-vertex-data-1.0.2.tgz",
    "hash": "889fd60bea506006ca33955ee1105175fb620219",
    "integrity": "sha512-BvCBFK2NZqerFTdMDgqfHBwxYWnxeCkwONsw6PvBMcUXqo8U/KDWwmXhqx1x2kLIg7DqIsJfOaJFOmlua3Lxuw==",
    "registry": "npm",
    "packageName": "flatten-vertex-data",
    "cacheIntegrity": "sha512-BvCBFK2NZqerFTdMDgqfHBwxYWnxeCkwONsw6PvBMcUXqo8U/KDWwmXhqx1x2kLIg7DqIsJfOaJFOmlua3Lxuw== sha1-iJ/WC+pQYAbKM5Ve4RBRdftiAhk="
  },
  "registry": "npm",
  "hash": "889fd60bea506006ca33955ee1105175fb620219"
}