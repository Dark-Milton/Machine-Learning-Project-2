{
  "manifest": {
    "name": "slab-decomposition",
    "version": "1.0.3",
    "description": "Slab decomposition data structure for 2D vertical ray queries",
    "main": "slabs.js",
    "dependencies": {
      "binary-search-bounds": "^2.0.0",
      "functional-red-black-tree": "^1.0.0",
      "robust-orientation": "^1.1.3"
    },
    "devDependencies": {
      "tape": "~2.5.0",
      "uniq": "0.0.2"
    },
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/slab-decomposition.git"
    },
    "keywords": [
      "slab",
      "decomposition",
      "ray",
      "query",
      "line",
      "segment",
      "2d"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mikolalysenko/slab-decomposition/issues"
    },
    "homepage": "https://github.com/mikolalysenko/slab-decomposition",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-slab-decomposition-1.0.3-0345b3d364d78dad3f400cd5c8e0424547d23e7c-integrity/node_modules/slab-decomposition/package.json",
    "readmeFilename": "README.md",
    "readme": "slab-decomposition\n==================\nGiven a collection of line segments, constructs a slab decomposition for the purpose of point location queries. This implementation uses a functional red-black tree to store the slabs, requires O(n log(n)) space and answers vertical ray queries in O(log(n)) time.\n\n# Example\n\n```javascript\nvar makeSlab = require(\"slab-decomposition\")\nvar slabs = makeSlab([\n  [[0, 0], [10, 10]],\n  [[10,10], [20, 0]],\n  [[5, 5], [20, 0]]\n])\n\nfor(var i=-10; i<10; ++i) {\n  console.log(slabs.castUp([i, -1]))\n}\n```\n\n# Install\n\n```\nnpm install slab-decomposition\n```\n\n# API\n\n## Constructor\n\n### `var slabs = require(\"slab-decomposition\")(segments)`\nConstructs a slab decomposition from the segments\n\n* `segments` is a collection of line segments which only overlap at their end points\n\n**Returns** A slab decomposition data structure\n\n## Methods\n\n### `slabs.castUp(point)`\nCasts a vertical ray from `point` going upward along `[0,1]`.  Returns the index of the first segment hit.\n\n* `point` is the base point of the ray\n\n**Returns** The index of the first segment hit by point, otherwise -1 if no segment intersects the ray.\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/slab-decomposition/-/slab-decomposition-1.0.3.tgz#0345b3d364d78dad3f400cd5c8e0424547d23e7c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/slab-decomposition/-/slab-decomposition-1.0.3.tgz",
    "hash": "0345b3d364d78dad3f400cd5c8e0424547d23e7c",
    "integrity": "sha512-1EfR304JHvX9vYQkUi4AKqN62mLsjk6W45xTk/TxwN8zd3HGwS7PVj9zj0I6fgCZqfGlimDEY+RzzASHn97ZmQ==",
    "registry": "npm",
    "packageName": "slab-decomposition",
    "cacheIntegrity": "sha512-1EfR304JHvX9vYQkUi4AKqN62mLsjk6W45xTk/TxwN8zd3HGwS7PVj9zj0I6fgCZqfGlimDEY+RzzASHn97ZmQ== sha1-A0Wz02TXja0/QAzVyOBCRUfSPnw="
  },
  "registry": "npm",
  "hash": "0345b3d364d78dad3f400cd5c8e0424547d23e7c"
}