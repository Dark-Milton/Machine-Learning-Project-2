{
  "manifest": {
    "name": "typedarray-pool",
    "version": "1.2.0",
    "description": "Reuse typed arrays",
    "main": "pool.js",
    "dependencies": {
      "bit-twiddle": "^1.0.0",
      "dup": "^1.0.0"
    },
    "devDependencies": {
      "tape": "^2.12.3"
    },
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/typedarray-pool.git"
    },
    "keywords": [
      "typed",
      "array",
      "cache",
      "pool",
      "memory",
      "malloc",
      "free",
      "reuse",
      "optimize",
      "construct",
      "overhead"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "readmeFilename": "README.md",
    "gitHead": "d7a8a448caf51042e6c371b11074aab6ebaf53ad",
    "testling": {
      "files": "test/*.js",
      "browsers": [
        "ie/10..latest",
        "firefox/17..latest",
        "firefox/nightly",
        "chrome/22..latest",
        "chrome/canary",
        "opera/12..latest",
        "opera/next",
        "safari/6.0..latest",
        "ipad/6.0..latest",
        "iphone/6.0..latest",
        "android-browser/4.2..latest"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-typedarray-pool-1.2.0-e7e90720144ba02b9ed660438af6f3aacfe33ac3-integrity/node_modules/typedarray-pool/package.json",
    "readme": "typedarray-pool\n===============\nA global pool for typed arrays.\n\n[![testling badge](https://ci.testling.com/mikolalysenko/typedarray-pool.png)](https://ci.testling.com/mikolalysenko/typedarray-pool)\n\n[![build status](https://secure.travis-ci.org/mikolalysenko/typedarray-pool.png)](http://travis-ci.org/mikolalysenko/typedarray-pool)\n\n# Example\n\n```javascript\nvar pool = require(\"typedarray-pool\")\n\n//Allocate a buffer with at least 128 floats\nvar f = pool.malloc(128, \"float\")\n\n// ... do stuff ...\n\n//When done, release buffer\npool.free(f)\n```\n\n# Install\n\n    npm install typedarray-pool\n\n# API\n\n```javascript\nvar pool = require(\"typedarray-pool\")\n```\n\n### `pool.malloc(n[, dtype])`\nAllocates a typed array (or ArrayBuffer) with at least n elements.\n\n* `n` is the number of elements in the array\n* `dtype` is the data type of the array to allocate.  Must be one of:\n\n  + `\"uint8\"`\n  + `\"uint16\"`\n  + `\"uint32\"`\n  + `\"int8\"`\n  + `\"int16\"`\n  + `\"int32\"`\n  + `\"float\"`\n  + `\"float32\"`\n  + `\"double\"`\n  + `\"float64\"`\n  + `\"arraybuffer\"`\n  + `\"data\"`\n  + `\"uint8_clamped\"`\n  + `\"bigint64\"`\n  + `\"biguint64\"`\n  + `\"buffer\"`\n\n**Returns** A typed array with at least `n` elements in it.  If `dtype` is undefined, an ArrayBuffer is returned.\n\n**Note**  You can avoid the dispatch by directly calling one of the following methods:\n\n* `pool.mallocUint8`\n* `pool.mallocUint16`\n* `pool.mallocUint32`\n* `pool.mallocInt8`\n* `pool.mallocInt16`\n* `pool.mallocInt32`\n* `pool.mallocFloat`\n* `pool.mallocDouble`\n* `pool.mallocArrayBuffer`\n* `pool.mallocDataView`\n* `pool.mallocUint8Clamped`\n* `pool.mallocBigInt64`\n* `pool.mallocBigUint64`\n* `pool.mallocBuffer`\n\n### `pool.free(array)`\nReturns the array back to the pool.\n\n* `array` The array object to return to the pool.\n\n**Note** You can speed up the method if you know the type of array before hand by calling one of the following:\n\n* `pool.freeUint8`\n* `pool.freeUint16`\n* `pool.freeUint32`\n* `pool.freeInt8`\n* `pool.freeInt16`\n* `pool.freeInt32`\n* `pool.freeFloat`\n* `pool.freeDouble`\n* `pool.freeArrayBuffer`\n* `pool.freeDataView`\n* `pool.freeUint8Clamped`\n* `pool.freeBigInt64`\n* `pool.freeBigUint64`\n* `pool.freeBuffer`\n\n### `pool.clearCache()`\nRemoves all references to cached arrays.  Use this when you are done with the pool to return all the cached memory to the garbage collector.\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License\n",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/typedarray-pool/-/typedarray-pool-1.2.0.tgz#e7e90720144ba02b9ed660438af6f3aacfe33ac3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/typedarray-pool/-/typedarray-pool-1.2.0.tgz",
    "hash": "e7e90720144ba02b9ed660438af6f3aacfe33ac3",
    "integrity": "sha512-YTSQbzX43yvtpfRtIDAYygoYtgT+Rpjuxy9iOpczrjpXLgGoyG7aS5USJXV2d3nn8uHTeb9rXDvzS27zUg5KYQ==",
    "registry": "npm",
    "packageName": "typedarray-pool",
    "cacheIntegrity": "sha512-YTSQbzX43yvtpfRtIDAYygoYtgT+Rpjuxy9iOpczrjpXLgGoyG7aS5USJXV2d3nn8uHTeb9rXDvzS27zUg5KYQ== sha1-5+kHIBRLoCue1mBDivbzqs/jOsM="
  },
  "registry": "npm",
  "hash": "e7e90720144ba02b9ed660438af6f3aacfe33ac3"
}