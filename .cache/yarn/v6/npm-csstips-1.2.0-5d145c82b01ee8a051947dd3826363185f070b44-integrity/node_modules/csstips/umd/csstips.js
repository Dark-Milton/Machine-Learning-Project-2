(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('typestyle')) :
  typeof define === 'function' && define.amd ? define(['exports', 'typestyle'], factory) :
  (global = global || self, factory(global.csstips = {}, global.typestyle));
}(this, function (exports, typestyle) { 'use strict';

  var fontStyleItalic = { fontStyle: 'italic' };
  var fontWeightNormal = { fontWeight: 'normal' };
  var fontWeightBold = { fontWeight: 'bold' };

  /**
   * @module Flexbox abstraction
   *
   * -webkit- is needed for mobile safari (iPhone / iPad)
   * -ms- is needed for IE
   */
  /**
   * If you have more than one child prefer horizontal,vertical
   */
  var flexRoot = {
      display: [
          '-ms-flexbox',
          '-webkit-flex',
          'flex',
      ]
  };
  /**
   * A general grouping component that has no impact on the parent flexbox properties e.g.
   * <vertical>
   *    <pass>
   *       <content/>
   *    </pass>
   * </vertical>
   */
  var pass = {
      display: 'inherit',
      '-ms-flex-direction': 'inherit',
      '-webkit-flex-direction': 'inherit',
      flexDirection: 'inherit',
      '-ms-flex-positive': 1,
      '-webkit-flex-grow': 1,
      flexGrow: 1,
  };
  var inlineRoot = {
      display: [
          '-ms-inline-flexbox',
          '-webkit-inline-flex',
          'inline-flex'
      ]
  };
  var horizontal = typestyle.extend(flexRoot, {
      '-ms-flex-direction': 'row',
      '-webkit-flex-direction': 'row',
      flexDirection: 'row'
  });
  var vertical = typestyle.extend(flexRoot, {
      '-ms-flex-direction': 'column',
      '-webkit-flex-direction': 'column',
      flexDirection: 'column'
  });
  var wrap = {
      '-ms-flex-wrap': 'wrap',
      '-webkit-flex-wrap': 'wrap',
      flexWrap: 'wrap'
  };
  /**
   * If you want items to be sized automatically by their children use this
   * This is because of a bug in various flexbox implementations: http://philipwalton.com/articles/normalizing-cross-browser-flexbox-bugs/
   * Specifically bug 1 : https://github.com/philipwalton/flexbugs#1-minimum-content-sizing-of-flex-items-not-honored
   */
  var content = {
      '-ms-flex-negative': 0,
      '-webkit-flex-shrink': 0,
      flexShrink: 0,
      flexBasis: 'auto',
  };
  var flex = {
      '-ms-flex': 1,
      '-webkit-flex': 1,
      flex: 1
  };
  var flex1 = flex;
  var flex2 = {
      '-ms-flex': 2,
      '-webkit-flex': 2,
      flex: 2
  };
  var flex3 = {
      '-ms-flex': 3,
      '-webkit-flex': 3,
      flex: 3
  };
  var flex4 = {
      '-ms-flex': 4,
      '-webkit-flex': 4,
      flex: 4
  };
  var flex5 = {
      '-ms-flex': 5,
      '-webkit-flex': 5,
      flex: 5
  };
  var flex6 = {
      '-ms-flex': 6,
      '-webkit-flex': 6,
      flex: 6
  };
  var flex7 = {
      '-ms-flex': 7,
      '-webkit-flex': 7,
      flex: 7
  };
  var flex8 = {
      '-ms-flex': 8,
      '-webkit-flex': 8,
      flex: 8
  };
  var flex9 = {
      '-ms-flex': 9,
      '-webkit-flex': 9,
      flex: 9
  };
  var flex10 = {
      '-ms-flex': 10,
      '-webkit-flex': 10,
      flex: 10
  };
  var flex11 = {
      '-ms-flex': 11,
      '-webkit-flex': 11,
      flex: 11
  };
  var flex12 = {
      '-ms-flex': 12,
      '-webkit-flex': 12,
      flex: 12
  };
  /////////////////////////////
  // Alignment in cross axis //
  /////////////////////////////
  var start = {
      '-ms-flex-align': 'start',
      '-webkit-align-items': 'flex-start',
      alignItems: 'flex-start'
  };
  var center = {
      '-ms-flex-align': 'center',
      '-webkit-align-items': 'center',
      alignItems: 'center'
  };
  var end = {
      '-ms-flex-align': 'end',
      '-webkit-align-items': 'flex-end',
      alignItems: 'flex-end'
  };
  ////////////////////////////
  // Alignment in main axis //
  ////////////////////////////
  var startJustified = {
      '-ms-flex-pack': 'start',
      '-webkit-justify-content': 'flex-start',
      justifyContent: 'flex-start'
  };
  var centerJustified = {
      '-ms-flex-pack': 'center',
      '-webkit-justify-content': 'center',
      justifyContent: 'center'
  };
  var endJustified = {
      '-ms-flex-pack': 'end',
      '-webkit-justify-content': 'flex-end',
      justifyContent: 'flex-end'
  };
  var aroundJustified = {
      '-ms-flex-pack': 'distribute',
      '-webkit-justify-content': 'space-around',
      justifyContent: 'space-around'
  };
  var betweenJustified = {
      '-ms-flex-pack': 'justify',
      '-webkit-justify-content': 'space-between',
      justifyContent: 'space-between'
  };
  ////////////////////////////
  // Alignment in both axes //
  ////////////////////////////
  var centerCenter = typestyle.extend(flexRoot, center, centerJustified);
  ////////////////////
  // Self alignment //
  ////////////////////
  var selfStart = {
      '-ms-flex-item-align': 'start',
      '-webkit-align-self': 'flex-start',
      alignSelf: 'flex-start'
  };
  var selfCenter = {
      '-ms-flex-item-align': 'center',
      '-webkit-align-self': 'center',
      alignSelf: 'center'
  };
  var selfEnd = {
      '-ms-flex-item-align': 'end',
      '-webkit-align-self': 'flex-end',
      alignSelf: 'flex-end'
  };
  var selfStretch = {
      '-ms-flex-item-align': 'stretch',
      '-webkit-align-self': 'stretch',
      alignSelf: 'stretch',
  };

  /**
   * @module Layers essentially allow you to create a new surface for layouts
   */
  /**
   * New layer parent
   */
  var layerParent = {
      position: 'relative',
  };
  /**
   * Use this to attach to any parent layer
   * and then you can use `left`/`top` etc to position yourself
   */
  var attachToLayerParent = {
      position: 'absolute',
  };
  /**
   * This new layer will attach itself to the nearest parent with `position:relative` or `position:absolute`
   * And will become the new `layerParent`
   */
  var newLayer = typestyle.extend(attachToLayerParent, {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0,
  });
  var attachToTop = typestyle.extend(attachToLayerParent, {
      top: 0,
      left: 0,
      right: 0,
  });
  var attachToRight = typestyle.extend(attachToLayerParent, {
      top: 0,
      right: 0,
      bottom: 0,
  });
  var attachToBottom = typestyle.extend(attachToLayerParent, {
      right: 0,
      bottom: 0,
      left: 0,
  });
  var attachToLeft = typestyle.extend(attachToLayerParent, {
      top: 0,
      bottom: 0,
      left: 0,
  });
  /**
   * Helps fixing to page
   */
  var fixed = {
      position: 'fixed'
  };
  var pageTop = typestyle.extend(fixed, {
      top: 0,
      left: 0,
      right: 0,
  });
  var pageRight = typestyle.extend(fixed, {
      top: 0,
      right: 0,
      bottom: 0,
  });
  var pageBottom = typestyle.extend(fixed, {
      right: 0,
      bottom: 0,
      left: 0,
  });
  var pageLeft = typestyle.extend(fixed, {
      top: 0,
      bottom: 0,
      left: 0,
  });

  function boxUnitToString(value) {
      if (typeof value === 'number') {
          return value.toString() + 'px';
      }
      else {
          return value;
      }
  }
  /**
   * Takes a function that expects Box to be passed into it
   * and creates a BoxFunction
   */
  function createBoxFunction(mapFromBox) {
      var result = function (a, b, c, d) {
          if (b === undefined && c === undefined && d === undefined) {
              b = c = d = a;
          }
          else if (c === undefined && d === undefined) {
              c = a;
              d = b;
          }
          var box = {
              top: boxUnitToString(a),
              right: boxUnitToString(b),
              bottom: boxUnitToString(c),
              left: boxUnitToString(d)
          };
          return mapFromBox(box);
      };
      return result;
  }
  var padding = createBoxFunction(function (box) {
      return {
          paddingTop: box.top,
          paddingRight: box.right,
          paddingBottom: box.bottom,
          paddingLeft: box.left
      };
  });
  var margin = createBoxFunction(function (box) {
      return {
          marginTop: box.top,
          marginRight: box.right,
          marginBottom: box.bottom,
          marginLeft: box.left
      };
  });
  var border = createBoxFunction(function (box) {
      return {
          borderTop: box.top,
          borderRight: box.right,
          borderBottom: box.bottom,
          borderLeft: box.left
      };
  });
  /**
   * Puts a vertical margin between each child
   */
  var verticallySpaced = function (margin) {
      var spacing = boxUnitToString(margin);
      return {
          '&>*': {
              marginBottom: spacing + ' !important'
          },
          '&>*:last-child': {
              marginBottom: '0px !important',
          }
      };
  };
  /**
   * Puts a horizontal margin between each child
   */
  var horizontallySpaced = function (margin) {
      var spacing = boxUnitToString(margin);
      return {
          '&>*': {
              marginRight: spacing + ' !important'
          },
          '&>*:last-child': {
              marginRight: '0px !important',
          }
      };
  };
  function gridSpaced(topAndBottom, leftAndRight) {
      if (leftAndRight === void 0) { leftAndRight = topAndBottom; }
      var vertical = boxUnitToString(topAndBottom);
      var horizontal = boxUnitToString(leftAndRight);
      return {
          marginTop: '-' + vertical,
          marginLeft: '-' + horizontal,
          '&>*': {
              marginTop: vertical,
              marginLeft: horizontal,
          }
      };
  }
  /**
   * Gives this element the same size as the nearest offsetParent
   */
  var fillParent = {
      width: '100%',
      height: '100%',
  };
  /** mixin: maxWidth */
  var maxWidth = function (value) {
      var maxWidth = boxUnitToString(value);
      return { maxWidth: maxWidth };
  };
  /** mixin: maxHeight */
  var maxHeight = function (value) {
      var maxHeight = boxUnitToString(value);
      return { maxHeight: maxHeight };
  };
  /**
   * Block elements: Centering *self* using margins
   */
  var horizontallyCenterSelf = {
      marginLeft: 'auto',
      marginRight: 'auto',
  };
  /**
   * Block elements: Centering *child* elements using textAlign
   */
  var horizontallyCenterChildren = {
      textAlign: 'center'
  };
  /** mixin: height */
  var height = function (value) {
      var height = boxUnitToString(value);
      return { height: height };
  };
  /** mixin: width */
  var width = function (value) {
      var width = boxUnitToString(value);
      return { width: width };
  };

  var scroll = {
      '-webkit-overflow-scrolling': 'touch',
      overflow: 'auto'
  };
  var scrollX = {
      '-webkit-overflow-scrolling': 'touch',
      overflowX: 'auto'
  };
  var scrollY = {
      '-webkit-overflow-scrolling': 'touch',
      overflowY: 'auto'
  };
  /**
   * If you expect a child somewhere down in the tree to scroll
   * you need to tell the browser to prevent a scroll bar.
   * Use : `parent(someChildWillScroll) > child(scroll)`
   */
  var someChildWillScroll = {
      overflow: 'hidden'
  };

  var block = {
      display: 'block'
  };
  var none = {
      display: 'none'
  };
  var inlineBlock = {
      display: 'inline-block'
  };
  var invisible = {
      visibility: 'hidden'
  };

  /**
   * Adds normalize.css to the registerd outputs
   */
  function normalize() {
      /**
       * To update:
       * - https://cdnjs.com/libraries/normalize
       * - then latest. Currently https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css
       * - then copy paste raw below
       * - remove the sourmap at the end of the file
       * - fix the test (checks length of raw)
       * - update the link in this comment
       *
       * Release
       * - If its a major version change in nomalize. Release as a major change in typestyle.
       * - otherwise minor
       **/
      typestyle.cssRaw("\n    button,hr,input{overflow:visible}audio,canvas,progress,video{display:inline-block}progress,sub,sup{vertical-align:baseline}html{font-family:sans-serif;line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0} menu,article,aside,details,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figcaption,figure,main{display:block}figure{margin:1em 40px}hr{box-sizing:content-box;height:0}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{}button,select{text-transform:none}[type=submit], [type=reset],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:ButtonText dotted 1px}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[hidden],template{display:none}\n    ".trim());
  }

  /**
   * Recommended Page setup
   * - Sets up the body to be full size
   * - Sets up box sizing to be border box
   **/
  function setupPage(rootSelector) {
      /** Use full window size for application */
      typestyle.cssRule('html, body', {
          height: '100%',
          width: '100%',
          padding: 0,
          margin: 0
      });
      /** Use border box */
      typestyle.cssRule('html', {
          '-moz-box-sizing': 'border-box',
          '-webkit-box-sizing': 'border-box',
          boxSizing: 'border-box'
      });
      typestyle.cssRule('*,*:before,*:after', {
          boxSizing: 'inherit',
      });
      /** Also root should fill parent */
      typestyle.cssRule(rootSelector, fillParent);
  }

  exports.aroundJustified = aroundJustified;
  exports.attachToBottom = attachToBottom;
  exports.attachToLayerParent = attachToLayerParent;
  exports.attachToLeft = attachToLeft;
  exports.attachToRight = attachToRight;
  exports.attachToTop = attachToTop;
  exports.betweenJustified = betweenJustified;
  exports.block = block;
  exports.border = border;
  exports.center = center;
  exports.centerCenter = centerCenter;
  exports.centerJustified = centerJustified;
  exports.content = content;
  exports.end = end;
  exports.endJustified = endJustified;
  exports.fillParent = fillParent;
  exports.flex = flex;
  exports.flex1 = flex1;
  exports.flex10 = flex10;
  exports.flex11 = flex11;
  exports.flex12 = flex12;
  exports.flex2 = flex2;
  exports.flex3 = flex3;
  exports.flex4 = flex4;
  exports.flex5 = flex5;
  exports.flex6 = flex6;
  exports.flex7 = flex7;
  exports.flex8 = flex8;
  exports.flex9 = flex9;
  exports.flexRoot = flexRoot;
  exports.fontStyleItalic = fontStyleItalic;
  exports.fontWeightBold = fontWeightBold;
  exports.fontWeightNormal = fontWeightNormal;
  exports.gridSpaced = gridSpaced;
  exports.height = height;
  exports.horizontal = horizontal;
  exports.horizontallyCenterChildren = horizontallyCenterChildren;
  exports.horizontallyCenterSelf = horizontallyCenterSelf;
  exports.horizontallySpaced = horizontallySpaced;
  exports.inlineBlock = inlineBlock;
  exports.inlineRoot = inlineRoot;
  exports.invisible = invisible;
  exports.layerParent = layerParent;
  exports.margin = margin;
  exports.maxHeight = maxHeight;
  exports.maxWidth = maxWidth;
  exports.newLayer = newLayer;
  exports.none = none;
  exports.normalize = normalize;
  exports.padding = padding;
  exports.pageBottom = pageBottom;
  exports.pageLeft = pageLeft;
  exports.pageRight = pageRight;
  exports.pageTop = pageTop;
  exports.pass = pass;
  exports.scroll = scroll;
  exports.scrollX = scrollX;
  exports.scrollY = scrollY;
  exports.selfCenter = selfCenter;
  exports.selfEnd = selfEnd;
  exports.selfStart = selfStart;
  exports.selfStretch = selfStretch;
  exports.setupPage = setupPage;
  exports.someChildWillScroll = someChildWillScroll;
  exports.start = start;
  exports.startJustified = startJustified;
  exports.vertical = vertical;
  exports.verticallySpaced = verticallySpaced;
  exports.width = width;
  exports.wrap = wrap;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
