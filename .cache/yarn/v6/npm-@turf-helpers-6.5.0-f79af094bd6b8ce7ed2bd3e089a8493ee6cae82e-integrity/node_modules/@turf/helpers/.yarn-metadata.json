{
  "manifest": {
    "name": "@turf/helpers",
    "version": "6.5.0",
    "description": "turf helpers module",
    "author": {
      "name": "Turf Authors"
    },
    "contributors": [
      {
        "name": "Tom MacWright",
        "email": "@tmcw"
      },
      {
        "name": "Stefano Borghi",
        "email": "@stebogit"
      },
      {
        "name": "Denis Carriere",
        "email": "@DenisCarriere"
      },
      {
        "name": "William Nordmann",
        "email": "@wnordmann"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/Turfjs/turf/issues"
    },
    "homepage": "https://github.com/Turfjs/turf",
    "repository": {
      "type": "git",
      "url": "git://github.com/Turfjs/turf.git"
    },
    "funding": "https://opencollective.com/turf",
    "publishConfig": {
      "access": "public"
    },
    "keywords": [
      "geo",
      "point",
      "turf",
      "geojson"
    ],
    "main": "dist/js/index.js",
    "module": "dist/es/index.js",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "import": "./dist/es/index.js",
        "require": "./dist/js/index.js"
      }
    },
    "types": "dist/js/index.d.ts",
    "sideEffects": false,
    "files": [
      "dist"
    ],
    "scripts": {
      "bench": "ts-node bench.js",
      "build": "npm-run-all build:*",
      "build:es": "tsc --outDir dist/es --module esnext --declaration false && echo '{\"type\":\"module\"}' > dist/es/package.json",
      "build:js": "tsc",
      "docs": "node ../../scripts/generate-readmes",
      "test": "npm-run-all test:*",
      "test:tape": "ts-node -r esm test.js",
      "test:types": "tsc --esModuleInterop --noEmit types.ts"
    },
    "devDependencies": {
      "@types/tape": "*",
      "benchmark": "*",
      "npm-run-all": "*",
      "tape": "*",
      "ts-node": "*",
      "tslint": "*",
      "typescript": "*"
    },
    "gitHead": "5375941072b90d489389db22b43bfe809d5e451e",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-@turf-helpers-6.5.0-f79af094bd6b8ce7ed2bd3e089a8493ee6cae82e-integrity/node_modules/@turf/helpers/package.json",
    "readmeFilename": "README.md",
    "readme": "# @turf/helpers\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## earthRadius\n\nEarth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n\n## factors\n\nUnit of measurement factors using a spherical (non-ellipsoid) earth radius.\n\n## unitsFactors\n\nUnits of measurement factors based on 1 meter.\n\n## areaFactors\n\nArea of measurement factors based on 1 square meter.\n\n## feature\n\nWraps a GeoJSON [Geometry][1] in a GeoJSON [Feature][2].\n\n**Parameters**\n\n-   `geometry` **[Geometry][3]** input geometry\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar geometry = {\n  \"type\": \"Point\",\n  \"coordinates\": [110, 50]\n};\n\nvar feature = turf.feature(geometry);\n\n//=feature\n```\n\nReturns **[Feature][8]** a GeoJSON Feature\n\n## geometry\n\nCreates a GeoJSON [Geometry][1] from a Geometry string type & coordinates.\nFor GeometryCollection type use `helpers.geometryCollection`\n\n**Parameters**\n\n-   `type` **[string][7]** Geometry Type\n-   `coordinates` **[Array][5]&lt;[number][6]>** Coordinates\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Geometry\n\n**Examples**\n\n```javascript\nvar type = 'Point';\nvar coordinates = [110, 50];\n\nvar geometry = turf.geometry(type, coordinates);\n\n//=geometry\n```\n\nReturns **[Geometry][3]** a GeoJSON Geometry\n\n## point\n\nCreates a [Point][9] [Feature][2] from a Position.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[number][6]>** longitude, latitude position (each in decimal degrees)\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar point = turf.point([-75.343, 39.984]);\n\n//=point\n```\n\nReturns **[Feature][8]&lt;[Point][10]>** a Point feature\n\n## points\n\nCreates a [Point][9] [FeatureCollection][11] from an Array of Point coordinates.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[number][6]>>** an array of Points\n-   `properties` **[Object][4]** Translate these properties to each Feature (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the FeatureCollection\n\n**Examples**\n\n```javascript\nvar points = turf.points([\n  [-75, 39],\n  [-80, 45],\n  [-78, 50]\n]);\n\n//=points\n```\n\nReturns **[FeatureCollection][12]&lt;[Point][10]>** Point Feature\n\n## polygon\n\nCreates a [Polygon][13] [Feature][2] from an Array of LinearRings.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[Array][5]&lt;[number][6]>>>** an array of LinearRings\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n\n//=polygon\n```\n\nReturns **[Feature][8]&lt;[Polygon][14]>** Polygon Feature\n\n## polygons\n\nCreates a [Polygon][13] [FeatureCollection][11] from an Array of Polygon coordinates.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[Array][5]&lt;[Array][5]&lt;[number][6]>>>>** an array of Polygon coordinates\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the FeatureCollection\n\n**Examples**\n\n```javascript\nvar polygons = turf.polygons([\n  [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n  [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n]);\n\n//=polygons\n```\n\nReturns **[FeatureCollection][12]&lt;[Polygon][14]>** Polygon FeatureCollection\n\n## lineString\n\nCreates a [LineString][15] [Feature][2] from an Array of Positions.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[number][6]>>** an array of Positions\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\nvar linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n\n//=linestring1\n//=linestring2\n```\n\nReturns **[Feature][8]&lt;[LineString][16]>** LineString Feature\n\n## lineStrings\n\nCreates a [LineString][15] [FeatureCollection][11] from an Array of LineString coordinates.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[number][6]>>** an array of LinearRings\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the FeatureCollection\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the FeatureCollection\n\n**Examples**\n\n```javascript\nvar linestrings = turf.lineStrings([\n  [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n  [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n]);\n\n//=linestrings\n```\n\nReturns **[FeatureCollection][12]&lt;[LineString][16]>** LineString FeatureCollection\n\n## featureCollection\n\nTakes one or more [Features][2] and creates a [FeatureCollection][11].\n\n**Parameters**\n\n-   `features` **[Array][5]&lt;[Feature][8]>** input features\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\nvar locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\nvar locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n\nvar collection = turf.featureCollection([\n  locationA,\n  locationB,\n  locationC\n]);\n\n//=collection\n```\n\nReturns **[FeatureCollection][12]** FeatureCollection of Features\n\n## multiLineString\n\nCreates a [Feature&lt;MultiLineString>][17] based on a\ncoordinate array. Properties can be added optionally.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[Array][5]&lt;[number][6]>>>** an array of LineStrings\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n\n//=multiLine\n```\n\n-   Throws **[Error][18]** if no coordinates are passed\n\nReturns **[Feature][8]&lt;[MultiLineString][19]>** a MultiLineString feature\n\n## multiPoint\n\nCreates a [Feature&lt;MultiPoint>][20] based on a\ncoordinate array. Properties can be added optionally.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[number][6]>>** an array of Positions\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar multiPt = turf.multiPoint([[0,0],[10,10]]);\n\n//=multiPt\n```\n\n-   Throws **[Error][18]** if no coordinates are passed\n\nReturns **[Feature][8]&lt;[MultiPoint][21]>** a MultiPoint feature\n\n## multiPolygon\n\nCreates a [Feature&lt;MultiPolygon>][22] based on a\ncoordinate array. Properties can be added optionally.\n\n**Parameters**\n\n-   `coordinates` **[Array][5]&lt;[Array][5]&lt;[Array][5]&lt;[Array][5]&lt;[number][6]>>>>** an array of Polygons\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n\n//=multiPoly\n```\n\n-   Throws **[Error][18]** if no coordinates are passed\n\nReturns **[Feature][8]&lt;[MultiPolygon][23]>** a multipolygon feature\n\n## geometryCollection\n\nCreates a [Feature&lt;GeometryCollection>][24] based on a\ncoordinate array. Properties can be added optionally.\n\n**Parameters**\n\n-   `geometries` **[Array][5]&lt;[Geometry][3]>** an array of GeoJSON Geometries\n-   `properties` **[Object][4]** an Object of key-value pairs to add as properties (optional, default `{}`)\n-   `options` **[Object][4]** Optional Parameters (optional, default `{}`)\n    -   `options.bbox` **[Array][5]&lt;[number][6]>?** Bounding Box Array [west, south, east, north] associated with the Feature\n    -   `options.id` **([string][7] \\| [number][6])?** Identifier associated with the Feature\n\n**Examples**\n\n```javascript\nvar pt = {\n    \"type\": \"Point\",\n      \"coordinates\": [100, 0]\n    };\nvar line = {\n    \"type\": \"LineString\",\n    \"coordinates\": [ [101, 0], [102, 1] ]\n  };\nvar collection = turf.geometryCollection([pt, line]);\n\n//=collection\n```\n\nReturns **[Feature][8]&lt;[GeometryCollection][25]>** a GeoJSON GeometryCollection Feature\n\n## round\n\nRound number to precision\n\n**Parameters**\n\n-   `num` **[number][6]** Number\n-   `precision` **[number][6]** Precision (optional, default `0`)\n\n**Examples**\n\n```javascript\nturf.round(120.4321)\n//=120\n\nturf.round(120.4321, 2)\n//=120.43\n```\n\nReturns **[number][6]** rounded number\n\n## radiansToLength\n\nConvert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n\n**Parameters**\n\n-   `radians` **[number][6]** in radians across the sphere\n-   `units` **[string][7]** can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers. (optional, default `'kilometers'`)\n\nReturns **[number][6]** distance\n\n## lengthToRadians\n\nConvert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n\n**Parameters**\n\n-   `distance` **[number][6]** in real units\n-   `units` **[string][7]** can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers. (optional, default `'kilometers'`)\n\nReturns **[number][6]** radians\n\n## lengthToDegrees\n\nConvert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\nValid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n\n**Parameters**\n\n-   `distance` **[number][6]** in real units\n-   `units` **[string][7]** can be degrees, radians, miles, or kilometers inches, yards, metres, meters, kilometres, kilometers. (optional, default `'kilometers'`)\n\nReturns **[number][6]** degrees\n\n## bearingToAzimuth\n\nConverts any bearing angle from the north line direction (positive clockwise)\nand returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n\n**Parameters**\n\n-   `bearing` **[number][6]** angle, between -180 and +180 degrees\n\nReturns **[number][6]** angle between 0 and 360 degrees\n\n## radiansToDegrees\n\nConverts an angle in radians to degrees\n\n**Parameters**\n\n-   `radians` **[number][6]** angle in radians\n\nReturns **[number][6]** degrees between 0 and 360 degrees\n\n## degreesToRadians\n\nConverts an angle in degrees to radians\n\n**Parameters**\n\n-   `degrees` **[number][6]** angle between 0 and 360 degrees\n\nReturns **[number][6]** angle in radians\n\n## convertLength\n\nConverts a length to the requested unit.\nValid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n\n**Parameters**\n\n-   `length` **[number][6]** to be converted\n-   `originalUnit` **[string][7]** of the length\n-   `finalUnit` **[string][7]** returned unit (optional, default `'kilometers'`)\n\nReturns **[number][6]** the converted length\n\n## convertArea\n\nConverts a area to the requested unit.\nValid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n\n**Parameters**\n\n-   `area` **[number][6]** to be converted\n-   `originalUnit` **[string][7]** of the distance (optional, default `'meters'`)\n-   `finalUnit` **[string][7]** returned unit (optional, default `'kilometers'`)\n\nReturns **[number][6]** the converted distance\n\n## isNumber\n\nisNumber\n\n**Parameters**\n\n-   `num` **any** Number to validate\n\n**Examples**\n\n```javascript\nturf.isNumber(123)\n//=true\nturf.isNumber('foo')\n//=false\n```\n\nReturns **[boolean][26]** true/false\n\n## isObject\n\nisObject\n\n**Parameters**\n\n-   `input` **any** variable to validate\n\n**Examples**\n\n```javascript\nturf.isObject({elevation: 10})\n//=true\nturf.isObject('foo')\n//=false\n```\n\nReturns **[boolean][26]** true/false\n\n[1]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[2]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[3]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[4]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[5]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[6]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[8]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[9]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[14]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[16]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[17]: Feature<MultiLineString>\n\n[18]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error\n\n[19]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[20]: Feature<MultiPoint>\n\n[21]: https://tools.ietf.org/html/rfc7946#section-3.1.3\n\n[22]: Feature<MultiPolygon>\n\n[23]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[24]: Feature<GeometryCollection>\n\n[25]: https://tools.ietf.org/html/rfc7946#section-3.1.8\n\n[26]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/helpers\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 TurfJS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@turf/helpers/-/helpers-6.5.0.tgz#f79af094bd6b8ce7ed2bd3e089a8493ee6cae82e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@turf/helpers/-/helpers-6.5.0.tgz",
    "hash": "f79af094bd6b8ce7ed2bd3e089a8493ee6cae82e",
    "integrity": "sha512-VbI1dV5bLFzohYYdgqwikdMVpe7pJ9X3E+dlr425wa2/sMJqYDhTO++ec38/pcPvPE6oD9WEEeU3Xu3gza+VPw==",
    "registry": "npm",
    "packageName": "@turf/helpers",
    "cacheIntegrity": "sha512-VbI1dV5bLFzohYYdgqwikdMVpe7pJ9X3E+dlr425wa2/sMJqYDhTO++ec38/pcPvPE6oD9WEEeU3Xu3gza+VPw== sha1-95rwlL1rjOftK9PgiahJPubK6C4="
  },
  "registry": "npm",
  "hash": "f79af094bd6b8ce7ed2bd3e089a8493ee6cae82e"
}