{
  "manifest": {
    "name": "polytope-closest-point",
    "version": "1.0.0",
    "description": "Computes the closest point to a polytope in arbitrary dimensions",
    "main": "index.js",
    "dependencies": {
      "numeric": "^1.2.6"
    },
    "devDependencies": {
      "tap": "~0.4.0"
    },
    "scripts": {
      "test": "tap test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/polytope-closest-point.git"
    },
    "keywords": [
      "polytope",
      "geometry",
      "closest",
      "point",
      "triangle",
      "line",
      "segment",
      "polygon",
      "polyhedra",
      "convex",
      "math",
      "3d"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "BOOST",
    "readmeFilename": "README.md",
    "gitHead": "bb0d7df62f074dfb2354b04aa414e29083deb98a",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-polytope-closest-point-1.0.0-e6e57f4081ab5e8c778b811ef06e2c48ae338c3f-integrity/node_modules/polytope-closest-point/package.json",
    "readme": "polytope-closest-point\n======================\nComputes the closest point in a convex polytope to a given point.\n\nInstall\n=======\nUsing npm, type the following command into your shell:\n\n    npm install polytope-closest-point\n\nUsage\n=====\nHere is an example of how to find the closest point to a triangle in a mesh:\n\n    var mesh = require(\"bunny\");\n    var result = new Array(3);\n    var sqr_distance = require(\"polytope-closest-point\")(\n                          mesh.cells[0],\n                          mesh.positions,\n                          [0,0,0],\n                          result);\n\nWhich computes the closest point in the first facet of the mesh to the point `[0,0,0]`, storing the resulting point in `result` and the squared distance in `sqr_distance`.\n\nFor more examples, see test/simple.js.\n\n### `require(\"polytope-closest-point\")(cell, positions, x[, result])`\n\nComputes the closest point in a polytope to `x`, storing the result in `result`.\n\n* `cell` is a list of indices into a positions representing the vertices of the polytope.\n* `positions` is an array of tuples representing the vertices of the polytope\n* `x` is the point we are querying against\n* `result` (optional) is the array to store the closest point in.\n\nReturns a float representing the squared Euclidean distance from x to the polytope.  If no such point can be found, it returns Number.NaN\n\nNotes:  For polytopes with fewer than 4 vertices, the code uses hand optimized routines derived from WildMagick.  For higher dimensions, it falls back to a general purpose quadratic programming solver that is ported from somewhat slower R/FORTRAN codes.  If you are planning on using this code to do distance queries on meshed surfaces, it is recommend you triangulate all your polygons first.\n\nCredits\n=======\nTriangle/tetrahedra closest point code derived from WildMagick (c) David Eberly 1998-2012.\n\nOther dimensions, (c) 2013 Mikola Lysenko\n\nBOOST License.\n",
    "licenseText": "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/polytope-closest-point/-/polytope-closest-point-1.0.0.tgz#e6e57f4081ab5e8c778b811ef06e2c48ae338c3f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/polytope-closest-point/-/polytope-closest-point-1.0.0.tgz",
    "hash": "e6e57f4081ab5e8c778b811ef06e2c48ae338c3f",
    "integrity": "sha1-5uV/QIGrXox3i4Ee8G4sSK4zjD8=",
    "registry": "npm",
    "packageName": "polytope-closest-point",
    "cacheIntegrity": "sha512-rvmt1e2ci9AUyWeHg+jsNuhGC4eBtxX4WjD9uDdvQzv2I1CVJSgbblJTslNXpGUu4KZSsUtSzvIdHKRKfRF3kw== sha1-5uV/QIGrXox3i4Ee8G4sSK4zjD8="
  },
  "registry": "npm",
  "hash": "e6e57f4081ab5e8c778b811ef06e2c48ae338c3f"
}