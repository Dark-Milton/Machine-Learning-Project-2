{
  "manifest": {
    "name": "kdbush",
    "version": "3.0.0",
    "description": "A very fast static 2D index for points based on kd-tree.",
    "module": "src/index.js",
    "main": "kdbush.js",
    "jsdelivr": "kdbush.min.js",
    "unpkg": "kdbush.min.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/mourner/kdbush.git"
    },
    "devDependencies": {
      "eslint": "^5.5.0",
      "eslint-config-mourner": "^3.0.0",
      "esm": "^3.0.82",
      "rollup": "^0.65.2",
      "rollup-plugin-buble": "^0.19.2",
      "rollup-plugin-terser": "^2.0.2",
      "tape": "^4.9.1"
    },
    "scripts": {
      "pretest": "eslint src test.js bench.js rollup.config.js",
      "test": "tape -r esm test.js",
      "bench": "node -r esm bench.js",
      "build": "rollup -c",
      "prepublishOnly": "npm run build"
    },
    "eslintConfig": {
      "extends": "mourner"
    },
    "keywords": [
      "index",
      "points",
      "kd-tree",
      "data structures",
      "algorithms",
      "spatial",
      "geometry"
    ],
    "files": [
      "kdbush.js",
      "kdbush.min.js",
      "src"
    ],
    "author": {
      "name": "Vladimir Agafonkin"
    },
    "license": "ISC",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-kdbush-3.0.0-f8484794d47004cc2d85ed3a79353dbe0abc2bf0-integrity/node_modules/kdbush/package.json",
    "readmeFilename": "README.md",
    "readme": "## KDBush [![Build Status](https://travis-ci.org/mourner/kdbush.svg?branch=master)](https://travis-ci.org/mourner/kdbush) [![Simply Awesome](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects)\n\nA very fast static spatial index for 2D points based on a flat KD-tree.\nCompared to [RBush](https://github.com/mourner/rbush):\n\n- points only — no rectangles\n- static — you can't add/remove items\n- indexing is 5-8 times faster\n\n```js\nconst index = new KDBush(points);         // make an index\nconst ids1 = index.range(10, 10, 20, 20); // bbox search - minX, minY, maxX, maxY\nconst ids2 = index.within(10, 10, 5);     // radius search - x, y, radius\n```\n\n## Install\n\nInstall using NPM (`npm install kdbush`) or Yarn (`yarn add kdbush`), then:\n\n```js\n// import as a ES module\nimport KDBush from 'kdbush';\n\n// or require in Node / Browserify\nconst KDBush = require('kdbush');\n```\n\nOr use a browser build directly:\n\n```html\n<script src=\"https://unpkg.com/kdbush@2.0.0/kdbush.min.js\"></script>\n```\n\n## API\n\n#### new KDBush(points[, getX, getY, nodeSize, arrayType])\n\nCreates an index from the given points.\n\n- `points`: Input array of points.\n- `getX`, `getY`: Functions to get `x` and `y` from an input point. By default, it assumes `[x, y]` format.\n- `nodeSize`: Size of the KD-tree node, `64` by default. Higher means faster indexing but slower search, and vise versa.\n- `arrayType`: Array type to use for storing coordinate values. `Float64Array` by default, but if your coordinates are integer values, `Int32Array` makes things a bit faster.\n\n```js\nconst index = kdbush(points, p => p.x, p => p.y, 64, Int32Array);\n```\n\n#### index.range(minX, minY, maxX, maxY)\n\nFinds all items within the given bounding box and returns an array of indices that refer to the items in the original `points` input array.\n\n```js\nconst results = index.range(10, 10, 20, 20).map(id => points[id]);\n```\n\n#### index.within(x, y, radius)\n\nFinds all items within a given radius from the query point and returns an array of indices.\n\n```js\nconst results = index.within(10, 10, 5).map(id => points[id]);\n```\n",
    "licenseText": "ISC License\n\nCopyright (c) 2018, Vladimir Agafonkin\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/kdbush/-/kdbush-3.0.0.tgz#f8484794d47004cc2d85ed3a79353dbe0abc2bf0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/kdbush/-/kdbush-3.0.0.tgz",
    "hash": "f8484794d47004cc2d85ed3a79353dbe0abc2bf0",
    "integrity": "sha512-hRkd6/XW4HTsA9vjVpY9tuXJYLSlelnkTmVFu4M9/7MIYQtFcHpbugAU7UbOfjOiVSVYl2fqgBuJ32JUmRo5Ew==",
    "registry": "npm",
    "packageName": "kdbush",
    "cacheIntegrity": "sha512-hRkd6/XW4HTsA9vjVpY9tuXJYLSlelnkTmVFu4M9/7MIYQtFcHpbugAU7UbOfjOiVSVYl2fqgBuJ32JUmRo5Ew== sha1-+EhHlNRwBMwthe06eTU9vgq8K/A="
  },
  "registry": "npm",
  "hash": "f8484794d47004cc2d85ed3a79353dbe0abc2bf0"
}