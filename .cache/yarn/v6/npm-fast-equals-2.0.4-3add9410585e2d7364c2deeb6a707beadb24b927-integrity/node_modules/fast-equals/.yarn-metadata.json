{
  "manifest": {
    "author": {
      "name": "tony_quetano@planttheidea.com"
    },
    "browser": "dist/fast-equals.js",
    "bugs": {
      "url": "https://github.com/planttheidea/fast-equals/issues"
    },
    "description": "A blazing fast equality comparison, either shallow or deep",
    "devDependencies": {
      "@rollup/plugin-node-resolve": "^13.0.6",
      "@types/jest": "^27.0.3",
      "@types/lodash": "^4.14.177",
      "@types/node": "^16.11.11",
      "@types/ramda": "^0.27.59",
      "@types/react": "^17.0.37",
      "@typescript-eslint/eslint-plugin": "^5.5.0",
      "@typescript-eslint/parser": "^5.5.0",
      "benchee": "^1.1.0",
      "cli-table3": "^0.6.0",
      "decircularize": "^1.0.0",
      "deep-eql": "^4.0.0",
      "deep-equal": "^2.0.5",
      "eslint": "^8.4.0",
      "eslint-config-airbnb": "^19.0.2",
      "eslint-plugin-import": "^2.25.3",
      "eslint-plugin-jsx-a11y": "^6.5.1",
      "eslint-plugin-react": "^7.27.1",
      "eslint-webpack-plugin": "^3.1.1",
      "fast-deep-equal": "^3.1.3",
      "fs-extra": "^10.0.0",
      "html-webpack-plugin": "^5.5.0",
      "in-publish": "^2.0.0",
      "jest": "^27.4.3",
      "lodash": "^4.17.21",
      "nano-equal": "^2.0.2",
      "react": "^17.0.2",
      "react-dom": "^17.0.2",
      "react-fast-compare": "^3.2.0",
      "release-it": "^14.11.8",
      "rollup": "^2.60.2",
      "rollup-plugin-terser": "^7.0.2",
      "rollup-plugin-typescript2": "^0.31.1",
      "shallow-equal-fuzzy": "^0.0.2",
      "ts-jest": "^27.1.0",
      "ts-loader": "^9.2.6",
      "typescript": "^4.5.2",
      "underscore": "^1.13.1",
      "webpack": "^5.64.4",
      "webpack-cli": "^4.9.1",
      "webpack-dev-server": "^4.6.0"
    },
    "homepage": "https://github.com/planttheidea/fast-equals#readme",
    "keywords": [
      "fast",
      "equal",
      "equals",
      "deep-equal",
      "equivalent"
    ],
    "license": "MIT",
    "main": "dist/fast-equals.cjs.js",
    "module": "dist/fast-equals.esm.js",
    "name": "fast-equals",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/planttheidea/fast-equals.git"
    },
    "scripts": {
      "benchmark": "npm run dist && node benchmark/index.js",
      "build": "NODE_ENV=production rollup -c",
      "dev": "NODE_ENV=development webpack serve --progress --config=webpack/webpack.config.js",
      "dist": "rimraf dist && npm run build",
      "lint": "eslint src/*.ts",
      "lint:fix": "npm run lint -- --fix",
      "start": "npm run dev",
      "prepublish": "if in-publish; then npm run prepublish:compile; fi",
      "prepublish:compile": "npm run typecheck && npm run lint && npm run test && npm run dist",
      "release": "release-it",
      "release:beta": "release-it --config=.release-it.beta.json",
      "test": "NODE_PATH=. jest",
      "test:coverage": "npm test -- --coverage",
      "test:watch": "npm test -- --watch",
      "typecheck": "tsc --noEmit"
    },
    "sideEffects": false,
    "types": "index.d.ts",
    "version": "2.0.4",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-fast-equals-2.0.4-3add9410585e2d7364c2deeb6a707beadb24b927-integrity/node_modules/fast-equals/package.json",
    "readmeFilename": "README.md",
    "readme": "# fast-equals\n\n<img src=\"https://img.shields.io/badge/build-passing-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/coverage-100%25-brightgreen.svg\"/>\n<img src=\"https://img.shields.io/badge/license-MIT-blue.svg\"/>\n\nPerform [blazing fast](#benchmarks) equality comparisons (either deep or shallow) on two objects passed. It has no dependencies, and is ~1kB when minified and gzipped.\n\nUnlike most equality validation libraries, the following types are handled out-of-the-box:\n\n- `NaN`\n- `Date` objects\n- `RegExp` objects\n- `Map` / `Set` iterables\n- `Promise` objects\n- `react` elements\n\nStarting with version `1.5.0`, circular objects are supported for both deep and shallow equality (see [`circularDeepEqual`](#circulardeepequal) and [`circularShallowEqual`](#circularshallowequal)). You can also create a custom nested comparator, for specific scenarios ([see below](#createcustomequal)).\n\n## Table of contents\n\n- [fast-equals](#fast-equals)\n  - [Table of contents](#table-of-contents)\n  - [Usage](#usage)\n    - [Specific builds](#specific-builds)\n  - [Available methods](#available-methods)\n    - [deepEqual](#deepequal)\n      - [Comparing `Map`s](#comparing-maps)\n    - [shallowEqual](#shallowequal)\n    - [sameValueZeroEqual](#samevaluezeroequal)\n    - [circularDeepEqual](#circulardeepequal)\n    - [circularShallowEqual](#circularshallowequal)\n    - [createCustomEqual](#createcustomequal)\n  - [Benchmarks](#benchmarks)\n  - [Development](#development)\n\n## Usage\n\nYou can either import the individual functions desired:\n\n```javascript\nimport { deepEqual } from 'fast-equals';\n\nconsole.log(deepEqual({ foo: 'bar' }, { foo: 'bar' })); // true\n```\n\nOr if you want to import all functions under a namespace:\n\n```javascript\nimport * as fe from 'fast-equals';\n\nconsole.log(fe.deep({ foo: 'bar' }, { foo: 'bar' })); // true\n```\n\n### Specific builds\n\nThere are three builds, an ESM build for modern build systems / runtimes, a CommonJS build for traditional NodeJS environments, and a UMD build for legacy implementations. The ideal one will likely be chosen for you automatically, however if you want to use a specific build you can always import it directly:\n\n- ESM => `fast-equals/dist/fast-equals.esm.js`\n  - For older `nodejs` versions that do not allow ESM with file extensions other than `.mjs` => `fast-equals/dist/fast-equals.mjs`\n- CommonJS => `fast-equals/dist/fast-equals.cjs.js`\n- UMD => `fast-equals/dist/fast-equals.js`\n\nThere is also a pre-minified version of the UMD build available:\n\n- Minified UMD => `fast-equals/dist/fast-equals.min.js`\n\n## Available methods\n\n### deepEqual\n\nPerforms a deep equality comparison on the two objects passed and returns a boolean representing the value equivalency of the objects.\n\n```javascript\nimport { deepEqual } from 'fast-equals';\n\nconst objectA = { foo: { bar: 'baz' } };\nconst objectB = { foo: { bar: 'baz' } };\n\nconsole.log(objectA === objectB); // false\nconsole.log(deepEqual(objectA, objectB)); // true\n```\n\n#### Comparing `Map`s\n\n`Map` objects support complex keys (objects, Arrays, etc.), however [the spec for key lookups in `Map` are based on `SameZeroValue`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#key_equality). If the spec were followed for comparison, the following would always be `false`:\n\n```javascript\nconst mapA = new Map([[{ foo: 'bar' }, { baz: 'quz' }]]);\nconst mapB = new Map([[{ foo: 'bar' }, { baz: 'quz' }]]);\n\ndeepEqual(mapA, mapB);\n```\n\nTo support true deep equality of all contents, `fast-equals` will perform a deep equality comparison for key and value parirs. Therefore, the above would be `true`.\n\n### shallowEqual\n\nPerforms a shallow equality comparison on the two objects passed and returns a boolean representing the value equivalency of the objects.\n\n```javascript\nimport { shallowEqual } from 'fast-equals';\n\nconst nestedObject = { bar: 'baz' };\n\nconst objectA = { foo: nestedObject };\nconst objectB = { foo: nestedObject };\nconst objectC = { foo: { bar: 'baz' } };\n\nconsole.log(objectA === objectB); // false\nconsole.log(shallowEqual(objectA, objectB)); // true\nconsole.log(shallowEqual(objectA, objectC)); // false\n```\n\n### sameValueZeroEqual\n\nPerforms a [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero) comparison on the two objects passed and returns a boolean representing the value equivalency of the objects. In simple terms, this means either strictly equal or both `NaN`.\n\n```javascript\nimport { sameValueZeroEqual } from 'fast-equals';\n\nconst mainObject = { foo: NaN, bar: 'baz' };\n\nconst objectA = 'baz';\nconst objectB = NaN;\nconst objectC = { foo: NaN, bar: 'baz' };\n\nconsole.log(sameValueZeroEqual(mainObject.bar, objectA)); // true\nconsole.log(sameValueZeroEqual(mainObject.foo, objectB)); // true\nconsole.log(sameValueZeroEqual(mainObject, objectC)); // false\n```\n\n### circularDeepEqual\n\nPerforms the same comparison as `deepEqual` but supports circular objects. It is slower than `deepEqual`, so only use if you know circular objects are present.\n\n```javascript\nfunction Circular(value) {\n  this.me = {\n    deeply: {\n      nested: {\n        reference: this,\n      },\n    },\n    value,\n  };\n}\n\nconsole.log(circularDeepEqual(new Circular('foo'), new Circular('foo'))); // true\nconsole.log(circularDeepEqual(new Circular('foo'), new Circular('bar'))); // false\n```\n\nJust as with `deepEqual`, [both keys and values are compared for deep equality](#comparing-maps).\n\n### circularShallowEqual\n\nPerforms the same comparison as `shallowequal` but supports circular objects. It is slower than `shallowEqual`, so only use if you know circular objects are present.\n\n```javascript\nconst array = ['foo'];\n\narray.push(array);\n\nconsole.log(circularShallowEqual(array, ['foo', array])); // true\nconsole.log(circularShallowEqual(array, [array])); // false\n```\n\n### createCustomEqual\n\nCreates a custom equality comparator that will be used on nested values in the object. Unlike `deepEqual` and `shallowEqual`, this is a partial-application function that will receive the internal comparator and should return a function that compares two objects.\n\nThe signature is as follows:\n\n```typescript\ntype EqualityComparator = (a: any, b: any, meta?: any) => boolean;\ntype EqualityComparatorCreator = (\n  deepEqual: EqualityComparator,\n) => EqualityComparator;\n\nfunction createCustomEqual(\n  createIsEqual?: EqualityComparatorCreator,\n): EqualityComparator;\n```\n\nThe `meta` parameter in `EqualityComparator` is whatever you want it to be. It will be passed through to all equality checks, and is meant specifically for use with custom equality methods. For example, with the `circularDeepEqual` and `circularShallowEqual` methods, it is used to pass through a cache of processed objects.\n\nAn example for a custom equality comparison that also checks against values in the meta object:\n\n```javascript\nimport { createCustomEqual } from 'fast-equals';\n\nconst isDeepEqualOrFooMatchesMeta = createCustomEqual(\n  (deepEqual) => (objectA, objectB, meta) =>\n    objectA.foo === meta ||\n    objectB.foo === meta ||\n    deepEqual(objectA, objectB, meta),\n);\n\nconst objectA = { foo: 'bar' };\nconst objectB = { foo: 'baz' };\nconst meta = 'bar';\n\nconsole.log(isDeepEqualOrFooMatchesMeta(objectA, objectB, meta)); // true\n```\n\n## Benchmarks\n\nAll benchmarks were performed on an i7-8650U Ubuntu Linux laptop with 24GB of memory using NodeJS version `12.19.1`, and are based on averages of running comparisons based deep equality on the following object types:\n\n- Primitives (`String`, `Number`, `null`, `undefined`)\n- `Function`\n- `Object`\n- `Array`\n- `Date`\n- `RegExp`\n- `react` elements\n- A mixed object with a combination of all the above types\n\n|                            | Operations / second |\n| -------------------------- | ------------------- |\n| **fast-equals**            | **153,880**         |\n| fast-deep-equal            | 144,035             |\n| react-fast-compare         | 130,324             |\n| nano-equal                 | 104,624             |\n| **fast-equals (circular)** | **97,610**          |\n| shallow-equal-fuzzy        | 83,946              |\n| underscore.isEqual         | 47,370              |\n| lodash.isEqual             | 25,053              |\n| deep-eql                   | 22,146              |\n| assert.deepStrictEqual     | 532                 |\n| deep-equal                 | 209                 |\n\nCaveats that impact the benchmark (and accuracy of comparison):\n\n- `Map`s, `Promise`s, and `Set`s were excluded from the benchmark entirely because no library other than `deep-eql` fully supported their comparison\n- `assert.deepStrictEqual` does not support `NaN` or `SameValueZero` equality for dates\n- `deep-eql` does not support `SameValueZero` equality for zero equality (positive and negative zero are not equal)\n- `deep-equal` does not support `NaN` and does not strictly compare object type, or date / regexp values, nor uses `SameValueZero` equality for dates\n- `fast-deep-equal` does not support `NaN` or `SameValueZero` equality for dates\n- `nano-equal` does not strictly compare object property structure, array length, or object type, nor `SameValueZero` equality for dates\n- `react-fast-compare` does not support `NaN` or `SameValueZero` equality for dates, and does not compare `function` equality\n- `shallow-equal-fuzzy` does not strictly compare object type or regexp values, nor `SameValueZero` equality for dates\n- `underscore.isEqual` does not support `SameValueZero` equality for primitives or dates\n\nAll of these have the potential of inflating the respective library's numbers in comparison to `fast-equals`, but it was the closest apples-to-apples comparison I could create of a reasonable sample size. It should be noted that `react` elements can be circular objects, however simple elements are not; I kept the `react` comparison very basic to allow it to be included.\n\n## Development\n\nStandard practice, clone the repo and `npm i` to get the dependencies. The following npm scripts are available:\n\n- benchmark => run benchmark tests against other equality libraries\n- build => build `main`, `module`, and `browser` distributables with `rollup`\n- clean => run `rimraf` on the `dist` folder\n- dev => start webpack playground App\n- dist => run `build`\n- lint => run ESLint on all files in `src` folder (also runs on `dev` script)\n- lint:fix => run `lint` script, but with auto-fixer\n- prepublish:compile => run `lint`, `test:coverage`, `transpile:lib`, `transpile:es`, and `dist` scripts\n- start => run `dev`\n- test => run AVA with NODE_ENV=test on all files in `test` folder\n- test:coverage => run same script as `test` with code coverage calculation via `nyc`\n- test:watch => run same script as `test` but keep persistent watcher\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Tony Quetano\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fast-equals/-/fast-equals-2.0.4.tgz#3add9410585e2d7364c2deeb6a707beadb24b927",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fast-equals/-/fast-equals-2.0.4.tgz",
    "hash": "3add9410585e2d7364c2deeb6a707beadb24b927",
    "integrity": "sha512-caj/ZmjHljPrZtbzJ3kfH5ia/k4mTJe/qSiXAGzxZWRZgsgDV0cvNaQULqUX8t0/JVlzzEdYOwCN5DmzTxoD4w==",
    "registry": "npm",
    "packageName": "fast-equals",
    "cacheIntegrity": "sha512-caj/ZmjHljPrZtbzJ3kfH5ia/k4mTJe/qSiXAGzxZWRZgsgDV0cvNaQULqUX8t0/JVlzzEdYOwCN5DmzTxoD4w== sha1-Ot2UEFheLXNkwt7ranB76tskuSc="
  },
  "registry": "npm",
  "hash": "3add9410585e2d7364c2deeb6a707beadb24b927"
}