{
  "manifest": {
    "name": "ndarray-scratch",
    "version": "1.2.0",
    "description": "Pooled memory for ndarrays",
    "main": "scratch.js",
    "dependencies": {
      "ndarray": "^1.0.14",
      "typedarray-pool": "^1.0.2",
      "ndarray-ops": "^1.2.1"
    },
    "devDependencies": {
      "tape": "^2.13.1"
    },
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/ndarray-scratch.git"
    },
    "keywords": [
      "ndarray",
      "pool",
      "memory",
      "typedarray",
      "scratch",
      "malloc",
      "free"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "readmeFilename": "README.md",
    "gitHead": "65525b62e25c70355a09b362b7aa13183acd4964",
    "bugs": {
      "url": "https://github.com/mikolalysenko/ndarray-scratch/issues"
    },
    "testling": {
      "files": "test/*.js",
      "browsers": [
        "ie/10..latest",
        "firefox/17..latest",
        "firefox/nightly",
        "chrome/22..latest",
        "chrome/canary",
        "opera/12..latest",
        "opera/next",
        "safari/5.1..latest",
        "ipad/6.0..latest",
        "iphone/6.0..latest",
        "android-browser/4.2..latest"
      ]
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-ndarray-scratch-1.2.0-6304636d62eba93db4727ac13c693341dba50e01-integrity/node_modules/ndarray-scratch/package.json",
    "readme": "ndarray-scratch\n===============\nA simple wrapper for typedarray-pool.  I got tired of manually constructing ndarrays from typedarrays, and so this module saves some keystrokes/sanity.\n\n[![testling badge](https://ci.testling.com/scijs/ndarray-scratch.png)](https://ci.testling.com/scijs/ndarray-scratch)\n\n[![build status](https://secure.travis-ci.org/scijs/ndarray-scratch.png)](http://travis-ci.org/scijs/ndarray-scratch)\n\n# Example\n\n```javascript\nvar pool = require(\"ndarray-scratch\")\n\n//Create a temporary typed array\nvar x = pool.malloc([100,100])\n\n//Do stuff with x\n\n//Release x\npool.free(x)\n```\n\n# Install\n\n    npm install ndarray-scratch\n\n# API\n\n```javascript\nvar pool = require(\"ndarray-pool\")\n```\n\n### `pool.malloc(shape[, dtype])`\nAllocates a temporary ndarray\n\n* `shape` is the shape of the array to allocate\n* `dtype` is the dtype of the array to allocate (default `\"double\"`)\n\n**Returns** a temporary ndarray\n\n### `pool.zeros(shape[,dtype])`\nCreates a scratch ndarray initialized to `0`\n\n* `shape` is the shape of the resulting array\n* `dtype` is the datatype of the array (default `\"double\"`)\n\n**Returns** A temporary ndarray initialized to 0\n\n### `pool.ones(shape[,dtype])`\nCreates a scratch ndarray initialized to `1`\n\n* `shape` is the shape of the resulting array\n* `dtype` is the datatype of the array (default `\"double\"`)\n\n**Returns** A temporary ndarray initialized to 1\n\n### `pool.eye(shape[,dtype])`\nCreates a scratch ndarray initialized to `1` if all indices equal, `0` otherwise.\n\n* `shape` is the shape of the resulting array\n* `dtype` is the datatype of the array (default `\"double\"`)\n\n**Returns** A temporary ndarray initialized to the identity matrix\n\n### `pool.free(array)`\nReleases a temporary ndarray\n\n* `array` is the ndarray to release.\n\n### `pool.clone(array)`\nCreates a copy of an ndarray with row-major order.\n\n* `array` is an ndarray\n\n**Returns** A temporary copy of `array`\n\n# Credits\n(c) 2013-2014 Mikola Lysenko. MIT License\n",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ndarray-scratch/-/ndarray-scratch-1.2.0.tgz#6304636d62eba93db4727ac13c693341dba50e01",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ndarray-scratch/-/ndarray-scratch-1.2.0.tgz",
    "hash": "6304636d62eba93db4727ac13c693341dba50e01",
    "integrity": "sha1-YwRjbWLrqT20cnrBPGkzQdulDgE=",
    "registry": "npm",
    "packageName": "ndarray-scratch",
    "cacheIntegrity": "sha512-a4pASwB1jQyJcKLYrwrladVfDZDUGc78qLJZbHyb1Q4rhte0URhzc6ALQpBcauwgov0sXLwZz3vYH5jKAhSMIg== sha1-YwRjbWLrqT20cnrBPGkzQdulDgE="
  },
  "registry": "npm",
  "hash": "6304636d62eba93db4727ac13c693341dba50e01"
}