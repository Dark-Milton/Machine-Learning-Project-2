{
  "manifest": {
    "name": "geojson-vt",
    "version": "3.2.1",
    "description": "Slice GeoJSON data into vector tiles efficiently",
    "homepage": "https://github.com/mapbox/geojson-vt",
    "keywords": [
      "spatial",
      "geojson",
      "tiles",
      "geometry"
    ],
    "author": {
      "name": "Vladimir Agafonkin"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mapbox/geojson-vt.git"
    },
    "module": "src/index.js",
    "main": "geojson-vt-dev.js",
    "jsdelivr": "geojson-vt.js",
    "unpkg": "geojson-vt.js",
    "devDependencies": {
      "benchmark": "^2.1.4",
      "coveralls": "^3.0.2",
      "eslint": "^5.2.0",
      "eslint-config-mourner": "^2.0.3",
      "esm": "^3.0.72",
      "nyc": "^12.0.2",
      "rollup": "^0.63.4",
      "rollup-plugin-uglify": "^4.0.0",
      "tape": "^4.9.1",
      "watchify": "^3.11.0"
    },
    "eslintConfig": {
      "extends": "mourner",
      "parserOptions": {
        "sourceType": "module"
      },
      "globals": {
        "topojson": true
      }
    },
    "license": "ISC",
    "scripts": {
      "pretest": "eslint src/*.js test/*.js debug/viz.js",
      "test": "nyc --require esm tape test/test-*.js",
      "coveralls": "nyc report --reporter=text-lcov | coveralls",
      "build": "rollup -c",
      "watch": "rollup -cw",
      "prepublishOnly": "npm run test && npm run build"
    },
    "files": [
      "geojson-vt.js",
      "geojson-vt-dev.js",
      "src"
    ],
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-geojson-vt-3.2.1-f8adb614d2c1d3f6ee7c4265cad4bbf3ad60c8b7-integrity/node_modules/geojson-vt/package.json",
    "readmeFilename": "README.md",
    "readme": "## geojson-vt &mdash; GeoJSON Vector Tiles\n\n[![Build Status](https://travis-ci.org/mapbox/geojson-vt.svg?branch=master)](https://travis-ci.org/mapbox/geojson-vt)\n[![Coverage Status](https://coveralls.io/repos/mapbox/geojson-vt/badge.svg)](https://coveralls.io/r/mapbox/geojson-vt)\n\nA highly efficient JavaScript library for **slicing GeoJSON data into vector tiles on the fly**,\nprimarily designed to enable rendering and interacting with large geospatial datasets\non the browser side (without a server).\n\nCreated to power GeoJSON in [Mapbox GL JS](https://github.com/mapbox/mapbox-gl-js),\nbut can be useful in other visualization platforms\nlike [Leaflet](https://github.com/Leaflet/Leaflet) and [d3](https://github.com/mbostock/d3),\nas well as Node.js server applications.\n\nResulting tiles conform to the JSON equivalent\nof the [vector tile specification](https://github.com/mapbox/vector-tile-spec/).\nTo make data rendering and interaction fast, the tiles are simplified,\nretaining the minimum level of detail appropriate for each zoom level\n(simplifying shapes, filtering out tiny polygons and polylines).\n\nRead more on how the library works [on the Mapbox blog](https://www.mapbox.com/blog/introducing-geojson-vt/).\n\nThere's a C++11 port: [geojson-vt-cpp](https://github.com/mapbox/geojson-vt-cpp)\n\n### Demo\n\nHere's **geojson-vt** action in [Mapbox GL JS](https://github.com/mapbox/mapbox-gl-js),\ndynamically loading a 100Mb US zip codes GeoJSON with 5.4 million points:\n\n![](https://cloud.githubusercontent.com/assets/25395/5360312/86028d8e-7f91-11e4-811f-87f24acb09ca.gif)\n\nThere's a convenient [debug page](http://mapbox.github.io/geojson-vt/debug/) to test out **geojson-vt** on different data.\nJust drag any GeoJSON on the page, watching the console.\n\n![](https://cloud.githubusercontent.com/assets/25395/5363235/41955c6e-7fa8-11e4-9575-a66ef54cb6d9.gif)\n\n### Usage\n\n```js\n// build an initial index of tiles\nvar tileIndex = geojsonvt(geoJSON);\n\n// request a particular tile\nvar features = tileIndex.getTile(z, x, y).features;\n\n// show an array of tile coordinates created so far\nconsole.log(tileIndex.tileCoords); // [{z: 0, x: 0, y: 0}, ...]\n```\n\n### Options\n\nYou can fine-tune the results with an options object,\nalthough the defaults are sensible and work well for most use cases.\n\n```js\nvar tileIndex = geojsonvt(data, {\n\tmaxZoom: 14,  // max zoom to preserve detail on; can't be higher than 24\n\ttolerance: 3, // simplification tolerance (higher means simpler)\n\textent: 4096, // tile extent (both width and height)\n\tbuffer: 64,   // tile buffer on each side\n\tdebug: 0,     // logging level (0 to disable, 1 or 2)\n\tlineMetrics: false, // whether to enable line metrics tracking for LineString/MultiLineString features\n\tpromoteId: null,    // name of a feature property to promote to feature.id. Cannot be used with `generateId`\n\tgenerateId: false,  // whether to generate feature ids. Cannot be used with `promoteId`\n\tindexMaxZoom: 5,       // max zoom in the initial tile index\n\tindexMaxPoints: 100000 // max number of points per tile in the index\n});\n```\n\nBy default, tiles at zoom levels above `indexMaxZoom` are generated on the fly, but you can pre-generate all possible tiles for `data` by setting `indexMaxZoom` and `maxZoom` to the same value, setting `indexMaxPoints` to `0`, and then accessing the resulting tile coordinates from the `tileCoords` property of `tileIndex`.\n\nThe `promoteId` and `generateId` options ignore existing `id` values on the feature objects.\n\nGeoJSON-VT only operates on zoom levels up to 24.\n\n### Install\n\nInstall using NPM (`npm install geojson-vt`) or Yarn (`yarn add geojson-vt`), then:\n\n```js\n// import as a ES module\nimport geojsonvt from 'geojson-vt';\n\n// or require in Node / Browserify\nconst geojsonvt = require('geojson-vt');\n```\n\nOr use a browser build directly:\n\n```html\n<script src=\"https://unpkg.com/geojson-vt@3.2.0/geojson-vt.js\"></script>\n```\n",
    "licenseText": "ISC License\n\nCopyright (c) 2015, Mapbox\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/geojson-vt/-/geojson-vt-3.2.1.tgz#f8adb614d2c1d3f6ee7c4265cad4bbf3ad60c8b7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/geojson-vt/-/geojson-vt-3.2.1.tgz",
    "hash": "f8adb614d2c1d3f6ee7c4265cad4bbf3ad60c8b7",
    "integrity": "sha512-EvGQQi/zPrDA6zr6BnJD/YhwAkBP8nnJ9emh3EnHQKVMfg/MRVtPbMYdgVy/IaEmn4UfagD2a6fafPDL5hbtwg==",
    "registry": "npm",
    "packageName": "geojson-vt",
    "cacheIntegrity": "sha512-EvGQQi/zPrDA6zr6BnJD/YhwAkBP8nnJ9emh3EnHQKVMfg/MRVtPbMYdgVy/IaEmn4UfagD2a6fafPDL5hbtwg== sha1-+K22FNLB0/bufEJlytS7861gyLc="
  },
  "registry": "npm",
  "hash": "f8adb614d2c1d3f6ee7c4265cad4bbf3ad60c8b7"
}