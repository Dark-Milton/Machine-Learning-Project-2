{
  "manifest": {
    "name": "point-in-big-polygon",
    "version": "2.0.1",
    "description": "Industrial strength point in polygon test",
    "main": "pnp-big.js",
    "dependencies": {
      "binary-search-bounds": "^2.0.0",
      "interval-tree-1d": "^1.0.1",
      "robust-orientation": "^1.1.3",
      "slab-decomposition": "^1.0.1"
    },
    "devDependencies": {
      "tape": "~2.5.0",
      "signum": "0.0.0",
      "robust-point-in-polygon": "^1.0.3"
    },
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/point-in-big-polygon.git"
    },
    "keywords": [
      "point",
      "in",
      "big",
      "polygon",
      "robust",
      "exact",
      "fast",
      "scalable",
      "2d",
      "classify",
      "orient"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mikolalysenko/point-in-big-polygon/issues"
    },
    "homepage": "https://github.com/mikolalysenko/point-in-big-polygon",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-point-in-big-polygon-2.0.1-69d293010cead58af08c3082ad1d23f600ef10af-integrity/node_modules/point-in-big-polygon/package.json",
    "readmeFilename": "README.md",
    "readme": "point-in-big-polygon\n====================\nIndustrial scale point-in-polygon test. Given a polygon, this module preprocesses it in O(n log(n)) time such that any point can be classified against the polygon in O(log(n)) operations. All computations are performed in exact arithmetic.\n\nIf you want to use multiple polygons/regions, you should use [point-in-region](https://github.com/mikolalysenko/point-in-region) instead.\n\n# Example\n\n```javascript\nvar preprocessPolygon = require('point-in-big-polygon')\n\n//Define the polygon loops\nvar loops = [\n  [ [-10, -10], [-10, 10], [10, 10], [10, -10] ],\n  [ [-1, -1], [1, -1], [1, 1], [-1, 1] ]\n]\n\n//Preprocess it\nvar classifyPoint = preprocessPolygon(loops)\n\n//Render polygon test in ASCII to console\nvar img = []\nfor(var y=-12; y<=12; y+=1) {\n  var row = []\n  for(var x=-12; x<=12; x+=0.5) {\n    var v = classifyPoint([x, y])\n    if(v < 0) {\n      row.push('-')\n    } else if(v === 0) {\n      row.push('o')\n    } else {\n      row.push('+')\n    }\n  }\n  img.push(row.join(''))\n}\nconsole.log(img.join('\\n'))\n```\n\nExample output:\n\n```\n+++++++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++\n++++ooooooooooooooooooooooooooooooooooooooooo++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o-----------------ooooo-----------------o++++\n++++o-----------------o+++o-----------------o++++\n++++o-----------------ooooo-----------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++o---------------------------------------o++++\n++++ooooooooooooooooooooooooooooooooooooooooo++++\n+++++++++++++++++++++++++++++++++++++++++++++++++\n+++++++++++++++++++++++++++++++++++++++++++++++++\n```\n\n# Install\n\nThis module works in any reasonable CommonJS environment including browserify, iojs and node.js.\n\n```\nnpm install point-in-big-polygon\n```\n\n# API\n\n## Constructor\n\n#### `var classifyPoint = require(\"point-in-big-polygon\")(loops)`\nPreprocess a polygon given by a collection of clockwise oriented loops to handle point membership queries.\n\n* `loops` are a collection of oriented loops representing the boundary of the polygon. These loops must be manifold (ie no self intersections or dangling edges).\n\n**Returns** A point membership function that can be used to classify points relative to the function\n\n## Method\n\n#### `classifyPoint(p)`\nThis function is the result of running the preprocessing operation on a polygon. It takes a single point as input and tests it against the boundary.\n\n* `p` is a point encoded as a length 2 array\n\n**Returns** A number which classifies `p` relative to the boundary\n\n* `-1` means that `p` is inside\n* `0` means that `p` is on the boundary\n* `+1` means that `p` is outside\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/point-in-big-polygon/-/point-in-big-polygon-2.0.1.tgz#69d293010cead58af08c3082ad1d23f600ef10af",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/point-in-big-polygon/-/point-in-big-polygon-2.0.1.tgz",
    "hash": "69d293010cead58af08c3082ad1d23f600ef10af",
    "integrity": "sha512-DtrN8pa2VfMlvmWlCcypTFeBE4+OYz1ojDNJLKCWa4doiVAD6PRBbxFYAT71tsp5oKaRXT5sxEiHCAQKb1zr2Q==",
    "registry": "npm",
    "packageName": "point-in-big-polygon",
    "cacheIntegrity": "sha512-DtrN8pa2VfMlvmWlCcypTFeBE4+OYz1ojDNJLKCWa4doiVAD6PRBbxFYAT71tsp5oKaRXT5sxEiHCAQKb1zr2Q== sha1-adKTAQzq1YrwjDCCrR0j9gDvEK8="
  },
  "registry": "npm",
  "hash": "69d293010cead58af08c3082ad1d23f600ef10af"
}