{
  "manifest": {
    "name": "jest-mock-extended",
    "version": "2.0.4",
    "homepage": "https://github.com/marchaos/jest-mock-extended",
    "description": "Type safe mocking extensions for jest",
    "files": [
      "lib/**/*"
    ],
    "repository": {
      "type": "git",
      "url": "https://github.com/marchaos/jest-mock-extended.git"
    },
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "scripts": {
      "prepare": "npm run build",
      "clean": "rimraf coverage lib",
      "test": "jest",
      "build": "tsc",
      "coveralls": "jest --coverage && cat ./coverage/lcov.info | coveralls"
    },
    "dependencies": {
      "ts-essentials": "^7.0.3"
    },
    "devDependencies": {
      "@types/jest": "^26.0.24",
      "coveralls": "^3.1.1",
      "jest": "^26.6.3",
      "prettier": "^2.3.2",
      "rimraf": "^3.0.2",
      "ts-jest": "^26.5.6",
      "typescript": "^4.3.5"
    },
    "peerDependencies": {
      "jest": "^24.0.0 || ^25.0.0 || ^26.0.0 || ^27.0.0",
      "typescript": "^3.0.0 || ^4.0.0"
    },
    "author": {
      "name": "Marc McIntyre",
      "email": "marchaos@gmail.com"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-jest-mock-extended-2.0.4-2bb430ba0adb9e10ea6a68d08731f2129330c8fe-integrity/node_modules/jest-mock-extended/package.json",
    "readmeFilename": "README.md",
    "readme": "# jest-mock-extended\n> Type safe mocking extensions for Jest 🃏\n\n[![Build Status](https://travis-ci.com/marchaos/jest-mock-extended.svg?branch=master)](https://travis-ci.com/marchaos/jest-mock-extended)\n[![Coverage Status](https://coveralls.io/repos/github/marchaos/jest-mock-extended/badge.svg?branch=master)](https://coveralls.io/github/marchaos/jest-mock-extended?branch=master)\n[![npm version](https://badge.fury.io/js/jest-mock-extended.svg)](https://badge.fury.io/js/jest-mock-extended)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![npm downloads](https://badgen.net/npm/dw/jest-mock-extended)](https://badge.fury.io/js/jest-mock-extended)\n\n## Features\n- Provides complete Typescript type safety for interfaces, argument types and return types\n- Ability to mock any interface or object\n- calledWith() extension to provide argument specific expectations, which works for objects and functions.\n- Extensive Matcher API compatible with Jasmine matchers\n- Supports mocking deep objects / class instances.\n- Familiar Jest like API\n\n## Installation\n```bash\nnpm install jest-mock-extended --save-dev\n```\nor\n```bash\nyarn add jest-mock-extended --dev\n```\n\n## Example\n\n```ts\nimport { mock } from 'jest-mock-extended';\n\ninterface PartyProvider {\n   getPartyType: () => string;\n   getSongs: (type: string) => string[]\n   start: (type: string) => void;\n}\n\ndescribe('Party Tests', () => {\n   test('Mock out an interface', () => {\n       const mock = mock<PartyProvider>();\n       mock.start('disco party');\n       \n       expect(mock.start).toHaveBeenCalledWith('disco party');\n   });\n   \n   \n   test('mock out a return type', () => {\n       const mock = mock<PartyProvider>();\n       mock.getPartyType.mockReturnValue('west coast party');\n       \n       expect(mock.getPartyType()).toBe('west coast party');\n   });\n});\n```\n\n## Assigning Mocks with a Type\n\nIf you wish to assign a mock to a variable that requires a type in your test, then you should use the MockProxy<> type\ngiven that this will provide the apis for calledWith() and other built-in jest types for providing test functionality.\n\n```ts\nimport { MockProxy, mock } from 'jest-mock-extended';\n\ndescribe('test', () => {\n    let myMock: MockProxy<MyInterface>;\n\n    beforeEach(() => {\n        myMock = mock<MyInterface>();\n    })\n\n    test(() => {\n         myMock.calledWith(1).mockReturnValue(2);\n         ...\n    })\n});\n\n```\n\n## calledWith() Extension\n\n```jest-mock-extended``` allows for invocation matching expectations. Types of arguments, even when using matchers are type checked.\n\n```ts\nconst provider = mock<PartyProvider>();\nprovider.getSongs.calledWith('disco party').mockReturnValue(['Dance the night away', 'Stayin Alive']);\nexpect(provider.getSongs('disco party')).toEqual(['Dance the night away', 'Stayin Alive']);\n\n// Matchers\nprovider.getSongs.calledWith(any()).mockReturnValue(['Saw her standing there']);\nprovider.getSongs.calledWith(anyString()).mockReturnValue(['Saw her standing there']);\n\n```\nYou can also use ```mockFn()``` to create a ```jest.fn()``` with the calledWith extension:\n\n```ts\n type MyFn = (x: number, y: number) => Promise<string>;\n const fn = mockFn<MyFn>();\n fn.calledWith(1, 2).mockReturnValue('str');\n```\n\n## Clearing / Resetting Mocks\n\n```jest-mock-extended``` exposes a mockClear and mockReset for resetting or clearing mocks with the same \nfunctionality as ```jest.fn()```.\n\n```ts\nimport { mock, mockClear, mockReset } from 'jest-mock-extended';\n\ndescribe('test', () => {\n   const mock: UserService = mock<UserService>();\n   \n   beforeEach(() => {\n      mockReset(mock); // or mockClear(mock)\n   });\n   ...\n})\n```\n\n## Deep mocks\n\nIf your class has objects returns from methods that you would also like to mock, you can use ```mockDeep``` in \nreplacement for mock.\n\n```ts\nimport { mockDeep } from 'jest-mock-extended';\n\nconst mockObj = mockDeep<Test1>();\nmockObj.deepProp.getNumber.calledWith(1).mockReturnValue(4);\nexpect(mockObj.deepProp.getNumber(1)).toBe(4);\n```\n\n## Available Matchers\n\n\n| Matcher               | Description                                                           |\n|-----------------------|-----------------------------------------------------------------------|\n|any()                  | Matches any arg of any type.                                          |\n|anyBoolean()           | Matches any boolean (true or false)                                   |\n|anyString()            | Matches any string including empty string                             |\n|anyNumber()            | Matches any number that is not NaN                                    |\n|anyFunction()          | Matches any function                                                  |\n|anyObject()            | Matches any object (typeof m === 'object') and is not null            |\n|anyArray()             | Matches any array                                                     |\n|anyMap()               | Matches any Map                                                       |\n|anySet()               | Matches any Set                                                       |\n|isA(class)             | e.g isA(DiscoPartyProvider)                                           |\n|includes('value')      | Checks if value is in the argument array                              |\n|containsKey('key')     |  Checks if the key exists in the object                               |\n|containsValue('value') | Checks if the value exists in an object                               |\n|has('value')           | checks if the value exists in a Set                                   |\n|notNull()              | value !== null                                                        |\n|notUndefined()         | value !== undefined                                                   |\n|notEmpty()             | value !== undefined && value !== null && value !== ''                 |\n|captor()               | Used to capture an arg - alternative to mock.calls[0][0]              |\n\n## Writing a Custom Matcher\n\nCustom matchers can be written using a ```MatcherCreator```\n\n```ts\nimport { MatcherCreator, Matcher } from 'jest-mock-extended';\n\n// expectedValue is optional\nexport const myMatcher: MatcherCreator<MyType> = (expectedValue) => new Matcher((actualValue) => {\n    return (expectedValue === actualValue && actualValue.isSpecial);\n});\n```\n\nBy default, the expected value and actual value are the same type. In the case where you need to type the expected value \ndifferently than the actual value, you can use the optional 2 generic parameter:\n\n```ts\nimport { MatcherCreator, Matcher } from 'jest-mock-extended';\n\n// expectedValue is optional\nexport const myMatcher: MatcherCreator<string[], string> = (expectedValue) => new Matcher((actualValue) => {\n    return (actualValue.includes(expectedValue));\n});\n```\n",
    "licenseText": "MIT License\n\nCopyright (c) 2019 Marc McIntyre\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/jest-mock-extended/-/jest-mock-extended-2.0.4.tgz#2bb430ba0adb9e10ea6a68d08731f2129330c8fe",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/jest-mock-extended/-/jest-mock-extended-2.0.4.tgz",
    "hash": "2bb430ba0adb9e10ea6a68d08731f2129330c8fe",
    "integrity": "sha512-MgL3B3GjURQFjjPGqbCANydA5BFNPygv0mYp4Tjfxohh9MWwxxX8Eq2p6ncCt/Vt+RAnaLlDaI7gwrDRD7Pt9A==",
    "registry": "npm",
    "packageName": "jest-mock-extended",
    "cacheIntegrity": "sha512-MgL3B3GjURQFjjPGqbCANydA5BFNPygv0mYp4Tjfxohh9MWwxxX8Eq2p6ncCt/Vt+RAnaLlDaI7gwrDRD7Pt9A== sha1-K7QwugrbnhDqamjQhzHyEpMwyP4="
  },
  "registry": "npm",
  "hash": "2bb430ba0adb9e10ea6a68d08731f2129330c8fe"
}