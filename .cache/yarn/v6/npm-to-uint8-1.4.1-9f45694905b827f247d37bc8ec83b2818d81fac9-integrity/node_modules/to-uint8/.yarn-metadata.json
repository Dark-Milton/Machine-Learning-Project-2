{
  "manifest": {
    "name": "to-uint8",
    "version": "1.4.1",
    "description": "Convert data to Uint8Array",
    "main": "index.js",
    "scripts": {
      "test": "node test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dy/to-uint8.git"
    },
    "keywords": [
      "uint8",
      "array-buffer",
      "to-array-buffer",
      "to-uint8-array",
      "u8",
      "to-arraybuffer"
    ],
    "author": {
      "name": "Dmitry Yv.",
      "email": "dfcreative@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dy/to-uint8/issues"
    },
    "homepage": "https://github.com/dy/to-uint8#readme",
    "dependencies": {
      "arr-flatten": "^1.1.0",
      "clamp": "^1.0.1",
      "is-base64": "^0.1.0",
      "is-float-array": "^1.0.0",
      "to-array-buffer": "^3.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-to-uint8-1.4.1-9f45694905b827f247d37bc8ec83b2818d81fac9-integrity/node_modules/to-uint8/package.json",
    "readmeFilename": "readme.md",
    "readme": "# to-uint8 [![unstable](https://img.shields.io/badge/stability-unstable-green.svg)](http://github.com/badges/stability-badges) [![Build Status](https://travis-ci.org/dy/to-uint8.svg?branch=master)](https://travis-ci.org/dy/to-uint8)\n\nConvert input array to uint8 array, detecting floats if required. Useful to ensure that an input array contains pixels/colors.\n\n[![npm install to-uint8](https://nodei.co/npm/to-uint8.png?mini=true)](https://npmjs.org/package/to-uint8/)\n\n```js\nvar u8 = require('to-uint8')\n\nvar pixels = u8([[0,0,0,1], [1,1,1,1]]) // <uint8 0,0,0,255, 255,255,255,255>\n```\n\n## `u8data = u8(data, detectFloat=true)`\n\nReturn Uint8Array `u8data` with input `data` values, possibly converted from floats, if required. `data` can be an Array, Array of Arrays, TypedArray, Buffer, ArrayBuffer, base64 string or any other container.\n\n```js\nu8(new Uint16Array([0, 1, 2])) // <uint8 0, 1, 2>\nu8(new Float32Array([0, .5, 1])) // <uint8 0, 127, 255>\nu8(new Float64Array([0, .5, 1])) // <uint8 0, 127, 255>\nu8([0, .5, 1]) // <uint8 0, 127, 255>\nu8([[0,0,0,0], [1,1,1,1]]) // <uint8 0,0,0,0, 255,255,255,255>\n\n// untyped array with int-ish values doesn't get converted\nu8([0, 1, 255]) // <uint8 0, 1, 255>\n\n// unless passed a flag to force conversion\nu8([0, 1, 255], false) // <uint8 0, 255, 255>\n\n// bad data returns null\nu8(/abc/) // null\n```\n\n## See also\n\n* [to-array-buffer](https://ghub.io/to-array-buffer) − convert anything to ArrayBuffer\n* [to-float32](https://ghub.io/to-float32) − convert anything to float32.\n\n## License\n\n(c) 2018 Dmitry Yv. MIT License\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Dmitry Ivanov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/to-uint8/-/to-uint8-1.4.1.tgz#9f45694905b827f247d37bc8ec83b2818d81fac9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/to-uint8/-/to-uint8-1.4.1.tgz",
    "hash": "9f45694905b827f247d37bc8ec83b2818d81fac9",
    "integrity": "sha512-o+ochsMlTZyucbww8It401FC2Rx+OP2RpDeYbA6h+y9HgedDl1UjdsJ9CmzKEG7AFP9es5PmJ4eDWeeeXihESg==",
    "registry": "npm",
    "packageName": "to-uint8",
    "cacheIntegrity": "sha512-o+ochsMlTZyucbww8It401FC2Rx+OP2RpDeYbA6h+y9HgedDl1UjdsJ9CmzKEG7AFP9es5PmJ4eDWeeeXihESg== sha1-n0VpSQW4J/JH03vI7IOygY2B+sk="
  },
  "registry": "npm",
  "hash": "9f45694905b827f247d37bc8ec83b2818d81fac9"
}