{
  "manifest": {
    "name": "box-intersect",
    "version": "1.0.2",
    "description": "Any dimensional box intersection",
    "main": "index.js",
    "scripts": {
      "test": "tape test/*.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mikolalysenko/box-intersect.git"
    },
    "keywords": [
      "box",
      "intersection",
      "collision",
      "detection",
      "aabb",
      "2d",
      "3d"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mikolalysenko/box-intersect/issues"
    },
    "homepage": "https://github.com/mikolalysenko/box-intersect",
    "devDependencies": {
      "array-shuffle": "^1.0.0",
      "dup": "^1.0.0",
      "guarded-array": "^1.0.0",
      "iota-array": "^1.0.0",
      "tape": "^3.4.0",
      "uniq": "^1.0.1"
    },
    "dependencies": {
      "bit-twiddle": "^1.0.2",
      "typedarray-pool": "^1.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-box-intersect-1.0.2-4693ad63e828868d0654b114e09364d6281f3fbd-integrity/node_modules/box-intersect/package.json",
    "readmeFilename": "README.md",
    "readme": "box-intersect\n=============\nThis modules finds all intersection in a set of n boxes in d-dimensions, or between a pair of sets with n and m boxes respectively.  The time taken is O((n+m) log^d(n+m)) and the algorithm uses a temporary scratch memory of size O(n+m).  This memory is pooled so that after the first execution no additional memory is allocated.  Some possible applications of this library include:\n\n* Collision detection\n* Polygon clipping\n* Batched box stabbing queries\n* Mesh boolean operations (CSG)\n\nThe algorithm in this package is based on the one described in the following paper:\n\n* [A. Zomorodian, H. Edelsbrunner. (2000) \"Software for fast box intersections\" In proceedings of SoCG](http://pub.ist.ac.at/~edels/Papers/2002-J-01-FastBoxIntersection.pdf)\n\nA detailed experimental analysis of the performance of this module as well as comparisons with other libraries for box intersection can be found in the following repository: \n\n* [The Great JavaScript Box Intersection Benchmark](https://github.com/mikolalysenko/box-intersect-benchmark)\n\nFor more information on this problem, please see the following series of blog posts:\n\n* [Collision detection (part 1)](http://0fps.net/2015/01/07/collision-detection-part-1/)\n* [Collision detection (part 2)](http://0fps.net/2015/01/18/collision-detection-part-2/)\n* [Collision detection (part 3)](http://0fps.net/2015/01/23/collision-detection-part-3-benchmarks/)\n\n# Example\n\n### Detecting overlaps in a set of boxes\n\nHere is how to detect all pairs of overlapping boxes in a single set of boxes:\n\n```javascript\nvar boxIntersect = require('box-intersect')\n\n//Boxes are listed as flattened 2*d length arrays\nvar boxes = [\n  [1, 1, 2, 2],   //Interpretation: [minX, minY, maxX, maxY]\n  [0, -1, 3, 2],\n  [2, 1, 4, 5],\n  [0.5, 3, 1, 10]\n]\n\n//Default behavior reports list of intersections\nconsole.log('overlaps:', boxIntersect(boxes))\n\n//Note:  Boxes are closed\n\n//Can also use a visitor to report all crossings\nvar result = boxIntersect(boxes, function(i,j) {\n  console.log('overlap:', boxes[i], boxes[j])\n\n  //Can early out by returning any value\n  if(i === 2 || j === 2) {\n    return 2\n  }\n})\n\nconsole.log('early out result:', result)\n```\n\n#### Output\n\n```\noverlap: [ [ 0, 1 ], [ 0, 2 ], [ 1, 2 ] ]\noverlap: [ 1, 1, 2, 2 ] [ 0, -1, 3, 2 ]\noverlap: [ 1, 1, 2, 2 ] [ 2, 1, 4, 5 ]\nearly out result: 2\n```\n\n### Bipartite intersection\n\nYou can also detect all intersections between two different sets of boxes:\n\n```javascript\nvar boxIntersect = require('box-intersect')\n\n//Again, boxes are given as flattened lists of coordinates\nvar red = [\n  [0, 0, 0, 8, 1, 1],  //Format: [minX, minY, minZ, maxX, maxY, maxZ]\n  [0, 0, 0, 1, 8, 1],\n  [0, 0, 0, 1, 1, 8]\n]\n\nvar blue = [\n  [5, 0, 0, 6, 10, 10],\n  [0, 5, 0, 10, 6, 10],\n  [0, 0, 5, 10, 10, 10]\n]\n\n//Report all crossings\nconsole.log('crossings=', boxIntersect(red, blue))\n\n//Again can use a visitor:\nboxIntersect(red, blue, function(r, b) {\n  console.log('overlap:', red[r], blue[b])\n})\n```\n\n#### Output\n\n```\ncrossings= [ [ 0, 0 ], [ 1, 1 ], [ 2, 2 ] ]\noverlap: [ 0, 0, 0, 8, 1, 1 ] [ 5, 0, 0, 6, 10, 10 ]\noverlap: [ 0, 0, 0, 1, 8, 1 ] [ 0, 5, 0, 10, 6, 10 ]\noverlap: [ 0, 0, 0, 1, 1, 8 ] [ 0, 0, 5, 10, 10, 10 ]\n```\n\n# Install\n\nUsing [npm](https://www.npmjs.org/), just run the following command:\n\n```sh\nnpm install box-intersect\n```\n\nThis module works in any reasonable CommonJS environment, such as browsersify, iojs or node.js.\n\n# API\n\n```javascript\nvar boxIntersect = require('box-intersect')\n```\n\n### `boxIntersect(boxes[, otherBoxes, visit])`\n\nFinds all pairs intersections in a set of boxes.  There are two basic modes of operation for this function:\n\n* `complete` which detects all pairs of intersections within a single set of boxes\n* `bipartite` which detects pairs of intersections between two different sets of boxes\n\nThe parameters to the function are as follows:\n\n* `boxes` is a list of boxes.  Boxes are represented as length 2*d arrays where the first d-components are the lower bound of the box and then the next d components are the upper bound.\n* `otherBoxes` is an optional list of boxes which `boxes` is tested against.  If not specified, then the algorithm will report self intersections in `boxes`\n* `visit(i,j)` is a callback which is called once for each overlapping pair of boxes.  If `visit` returns any value not equal to `undefined`, then the search is terminated immediately and this value is returned.  If `visit` is not specified, then a list of intersecting pairs is returned.\n\n**Returns** If `visit` was specified, then the last returned value of `visit`.  Otherwise an array of pairs of intersecting boxes.\n\n**Note** The boxes are treated as cartesian products of *closed* intervals.  For example, the boxes `[1,1,2,2]` and `[0,0,1,1]` will be reported as intersecting by this module.\n\n# License\n\n(c) 2014 Mikola Lysenko. MIT License",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/box-intersect/-/box-intersect-1.0.2.tgz#4693ad63e828868d0654b114e09364d6281f3fbd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/box-intersect/-/box-intersect-1.0.2.tgz",
    "hash": "4693ad63e828868d0654b114e09364d6281f3fbd",
    "integrity": "sha512-yJeMwlmFPG1gIa7Rs/cGXeI6iOj6Qz5MG5PE61xLKpElUGzmJ4abm+qsLpzxKJFpsSDq742BQEocr8dI2t8Nxw==",
    "registry": "npm",
    "packageName": "box-intersect",
    "cacheIntegrity": "sha512-yJeMwlmFPG1gIa7Rs/cGXeI6iOj6Qz5MG5PE61xLKpElUGzmJ4abm+qsLpzxKJFpsSDq742BQEocr8dI2t8Nxw== sha1-RpOtY+goho0GVLEU4JNk1igfP70="
  },
  "registry": "npm",
  "hash": "4693ad63e828868d0654b114e09364d6281f3fbd"
}