{
  "manifest": {
    "name": "@turf/meta",
    "version": "6.5.0",
    "description": "turf meta module",
    "author": {
      "name": "Turf Authors"
    },
    "contributors": [
      {
        "name": "Tom MacWright",
        "email": "@tmcw"
      },
      {
        "name": "Daniel Pulido",
        "email": "@dpmcmlxxvi"
      },
      {
        "name": "Denis Carriere",
        "email": "@DenisCarriere"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/Turfjs/turf/issues"
    },
    "homepage": "https://github.com/Turfjs/turf",
    "repository": {
      "type": "git",
      "url": "git://github.com/Turfjs/turf.git"
    },
    "funding": "https://opencollective.com/turf",
    "publishConfig": {
      "access": "public"
    },
    "keywords": [
      "functional",
      "programming",
      "turfjs",
      "geojson",
      "meta",
      "flattenEach",
      "flattenReduce",
      "segmentEach",
      "segmentReduce",
      "coordEach",
      "coordReduce",
      "propEach",
      "propReduce",
      "featureEach",
      "featureReduce",
      "coordAll",
      "geomEach",
      "geomReduce",
      "lineEeach",
      "lineReduce"
    ],
    "main": "dist/js/index.js",
    "module": "dist/es/index.js",
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "import": "./dist/es/index.js",
        "require": "./dist/js/index.js"
      }
    },
    "types": "index.d.ts",
    "sideEffects": false,
    "files": [
      "dist",
      "index.d.ts"
    ],
    "scripts": {
      "bench": "node -r esm bench.js",
      "build": "rollup -c ../../rollup.config.js && echo '{\"type\":\"module\"}' > dist/es/package.json",
      "docs": "node ../../scripts/generate-readmes",
      "test": "npm-run-all test:*",
      "test:tape": "node -r esm test.js",
      "test:types": "tsc --esModuleInterop --noEmit types.ts"
    },
    "devDependencies": {
      "@turf/random": "^6.5.0",
      "benchmark": "*",
      "npm-run-all": "*",
      "rollup": "*",
      "tape": "*"
    },
    "dependencies": {
      "@turf/helpers": "^6.5.0"
    },
    "gitHead": "5375941072b90d489389db22b43bfe809d5e451e",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-@turf-meta-6.5.0-b725c3653c9f432133eaa04d3421f7e51e0418ca-integrity/node_modules/@turf/meta/package.json",
    "readmeFilename": "README.md",
    "readme": "# @turf/meta\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n## coordEachCallback\n\nCallback for coordEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentCoord` **[Array][2]&lt;[number][3]>** The current coordinate being processed.\n-   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## coordEach\n\nIterate over coordinates in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n-   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\nReturns **void** \n\n## coordReduce\n\nReduce coordinates in any GeoJSON object, similar to Array.reduce()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Geometry][6] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentCoord, coordIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n-   `excludeWrapCoord` **[boolean][7]** whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration. (optional, default `false`)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentCoord\n  //=coordIndex\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentCoord;\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordReduceCallback\n\nCallback for coordReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentCoord` **[Array][2]&lt;[number][3]>** The current coordinate being processed.\n-   `coordIndex` **[number][3]** The current index of the coordinate being processed.\n    Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n\n## propEach\n\nIterate over properties in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentProperties, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propEach(features, function (currentProperties, featureIndex) {\n  //=currentProperties\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## propEachCallback\n\nCallback for propEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentProperties` **[Object][8]** The current Properties being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduceCallback\n\nCallback for propReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentProperties` **any** The current Properties being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## propReduce\n\nReduce properties in any GeoJSON object into a single value,\nsimilar to how Array.reduce works. However, in this case we lazily run\nthe reduction, so an array of all properties is unnecessary.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentProperties, featureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n  //=previousValue\n  //=currentProperties\n  //=featureIndex\n  return currentProperties\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## featureEachCallback\n\nCallback for featureEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentFeature` **[Feature][5]&lt;any>** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureEach\n\nIterate over features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.featureEach(features, function (currentFeature, featureIndex) {\n  //=currentFeature\n  //=featureIndex\n});\n```\n\nReturns **void** \n\n## featureReduceCallback\n\nCallback for featureReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature][5]** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n\n## featureReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {\"foo\": \"bar\"}),\n  turf.point([36, 53], {\"hello\": \"world\"})\n]);\n\nturf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## coordAll\n\nGet all coordinates from any GeoJSON object.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n  turf.point([26, 37], {foo: 'bar'}),\n  turf.point([36, 53], {hello: 'world'})\n]);\n\nvar coords = turf.coordAll(features);\n//= [[26, 37], [36, 53]]\n```\n\nReturns **[Array][2]&lt;[Array][2]&lt;[number][3]>>** coordinate position array\n\n## geomEachCallback\n\nCallback for geomEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n-   `featureBBox` **[Array][2]&lt;[number][3]>** The current Feature BBox being processed.\n-   `featureId` **([number][3] \\| [string][9])** The current Feature Id being processed.\n\n## geomEach\n\nIterate over each geometry in any GeoJSON object, similar to Array.forEach()\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n});\n```\n\nReturns **void** \n\n## geomReduceCallback\n\nCallback for geomReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentGeometry` **[Geometry][6]** The current Geometry being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `featureProperties` **[Object][8]** The current Feature Properties being processed.\n-   `featureBBox` **[Array][2]&lt;[number][3]>** The current Feature BBox being processed.\n-   `featureId` **([number][3] \\| [string][9])** The current Feature Id being processed.\n\n## geomReduce\n\nReduce geometry in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.point([36, 53], {hello: 'world'})\n]);\n\nturf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n  //=previousValue\n  //=currentGeometry\n  //=featureIndex\n  //=featureProperties\n  //=featureBBox\n  //=featureId\n  return currentGeometry\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## flattenEachCallback\n\nCallback for flattenEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentFeature` **[Feature][5]** The current flattened feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenEach\n\nIterate over flattened features in any GeoJSON object, similar to\nArray.forEach.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n});\n```\n\n## flattenReduceCallback\n\nCallback for flattenReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentFeature` **[Feature][5]** The current Feature being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n\n## flattenReduce\n\nReduce flattened features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar features = turf.featureCollection([\n    turf.point([26, 37], {foo: 'bar'}),\n    turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n]);\n\nturf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n  //=previousValue\n  //=currentFeature\n  //=featureIndex\n  //=multiFeatureIndex\n  return currentFeature\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## segmentEachCallback\n\nCallback for segmentEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentSegment` **[Feature][5]&lt;[LineString][10]>** The current Segment being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n-   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\nReturns **void** \n\n## segmentEach\n\nIterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON\n-   `callback` **[Function][1]** a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //=currentSegment\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  //=segmentIndex\n});\n\n// Calculate the total number of segments\nvar total = 0;\nturf.segmentEach(polygon, function () {\n    total++;\n});\n```\n\nReturns **void** \n\n## segmentReduceCallback\n\nCallback for segmentReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentSegment` **[Feature][5]&lt;[LineString][10]>** The current Segment being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed.\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed.\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed.\n-   `segmentIndex` **[number][3]** The current index of the Segment being processed.\n\n## segmentReduce\n\nReduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n(Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** any GeoJSON\n-   `callback` **[Function][1]** a method that takes (previousValue, currentSegment, currentIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n\n// Iterate over GeoJSON by 2-vertex segments\nturf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n  //= previousSegment\n  //= currentSegment\n  //= featureIndex\n  //= multiFeatureIndex\n  //= geometryIndex\n  //= segmentInex\n  return currentSegment\n});\n\n// Calculate the total number of segments\nvar initialValue = 0\nvar total = turf.segmentReduce(polygon, function (previousValue) {\n    previousValue++;\n    return previousValue;\n}, initialValue);\n```\n\nReturns **void** \n\n## lineEachCallback\n\nCallback for lineEach\n\nType: [Function][1]\n\n**Parameters**\n\n-   `currentLine` **[Feature][5]&lt;[LineString][10]>** The current LineString|LinearRing being processed\n-   `featureIndex` **[number][3]** The current index of the Feature being processed\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineEach\n\nIterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\nsimilar to Array.forEach.\n\n**Parameters**\n\n-   `geojson` **([Geometry][6] \\| [Feature][5]&lt;([LineString][10] \\| [Polygon][11] \\| [MultiLineString][12] \\| [MultiPolygon][13])>)** object\n-   `callback` **[Function][1]** a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n  [[26, 37], [35, 45]],\n  [[36, 53], [38, 50], [41, 55]]\n]);\n\nturf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n});\n```\n\n## lineReduceCallback\n\nCallback for lineReduce\n\nThe first time the callback function is called, the values provided as arguments depend\non whether the reduce method has an initialValue argument.\n\nIf an initialValue is provided to the reduce method:\n\n-   The previousValue argument is initialValue.\n-   The currentValue argument is the value of the first element present in the array.\n\nIf an initialValue is not provided:\n\n-   The previousValue argument is the value of the first element present in the array.\n-   The currentValue argument is the value of the second element present in the array.\n\nType: [Function][1]\n\n**Parameters**\n\n-   `previousValue` **any** The accumulated value previously returned in the last invocation\n    of the callback, or initialValue, if supplied.\n-   `currentLine` **[Feature][5]&lt;[LineString][10]>** The current LineString|LinearRing being processed.\n-   `featureIndex` **[number][3]** The current index of the Feature being processed\n-   `multiFeatureIndex` **[number][3]** The current index of the Multi-Feature being processed\n-   `geometryIndex` **[number][3]** The current index of the Geometry being processed\n\n## lineReduce\n\nReduce features in any GeoJSON object, similar to Array.reduce().\n\n**Parameters**\n\n-   `geojson` **([Geometry][6] \\| [Feature][5]&lt;([LineString][10] \\| [Polygon][11] \\| [MultiLineString][12] \\| [MultiPolygon][13])>)** object\n-   `callback` **[Function][1]** a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n-   `initialValue` **any?** Value to use as the first argument to the first call of the callback.\n\n**Examples**\n\n```javascript\nvar multiPoly = turf.multiPolygon([\n  turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n  turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n]);\n\nturf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n  //=previousValue\n  //=currentLine\n  //=featureIndex\n  //=multiFeatureIndex\n  //=geometryIndex\n  return currentLine\n});\n```\n\nReturns **any** The value that results from the reduction.\n\n## findSegment\n\nFinds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\nPoint & MultiPoint will always return null.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** Any GeoJSON Feature or Geometry\n-   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n    -   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    -   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    -   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    -   `options.segmentIndex` **[number][3]** Segment Index (optional, default `0`)\n    -   `options.properties` **[Object][8]** Translate Properties to output LineString (optional, default `{}`)\n    -   `options.bbox` **[BBox][14]** Translate BBox to output LineString (optional, default `{}`)\n    -   `options.id` **([number][3] \\| [string][9])** Translate Id to output LineString (optional, default `{}`)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findSegment(multiLine);\n// => Feature<LineString<[[10, 10], [50, 30]]>>\n\n// First Segment of 2nd Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: 1});\n// => Feature<LineString<[[-10, -10], [-50, -30]]>>\n\n// Last Segment of Last Multi Feature\nturf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n// => Feature<LineString<[[-50, -30], [-30, -40]]>>\n```\n\nReturns **[Feature][5]&lt;[LineString][10]>** 2-vertex GeoJSON Feature LineString\n\n## findPoint\n\nFinds a particular Point from a GeoJSON using `@turf/meta` indexes.\n\nNegative indexes are permitted.\n\n**Parameters**\n\n-   `geojson` **([FeatureCollection][4] \\| [Feature][5] \\| [Geometry][6])** Any GeoJSON Feature or Geometry\n-   `options` **[Object][8]** Optional parameters (optional, default `{}`)\n    -   `options.featureIndex` **[number][3]** Feature Index (optional, default `0`)\n    -   `options.multiFeatureIndex` **[number][3]** Multi-Feature Index (optional, default `0`)\n    -   `options.geometryIndex` **[number][3]** Geometry Index (optional, default `0`)\n    -   `options.coordIndex` **[number][3]** Coord Index (optional, default `0`)\n    -   `options.properties` **[Object][8]** Translate Properties to output Point (optional, default `{}`)\n    -   `options.bbox` **[BBox][14]** Translate BBox to output Point (optional, default `{}`)\n    -   `options.id` **([number][3] \\| [string][9])** Translate Id to output Point (optional, default `{}`)\n\n**Examples**\n\n```javascript\nvar multiLine = turf.multiLineString([\n    [[10, 10], [50, 30], [30, 40]],\n    [[-10, -10], [-50, -30], [-30, -40]]\n]);\n\n// First Segment (defaults are 0)\nturf.findPoint(multiLine);\n// => Feature<Point<[10, 10]>>\n\n// First Segment of the 2nd Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: 1});\n// => Feature<Point<[-10, -10]>>\n\n// Last Segment of last Multi-Feature\nturf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n// => Feature<Point<[-30, -40]>>\n```\n\nReturns **[Feature][5]&lt;[Point][15]>** 2-vertex GeoJSON Feature Point\n\n[1]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function\n\n[2]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array\n\n[3]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number\n\n[4]: https://tools.ietf.org/html/rfc7946#section-3.3\n\n[5]: https://tools.ietf.org/html/rfc7946#section-3.2\n\n[6]: https://tools.ietf.org/html/rfc7946#section-3.1\n\n[7]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean\n\n[8]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object\n\n[9]: https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String\n\n[10]: https://tools.ietf.org/html/rfc7946#section-3.1.4\n\n[11]: https://tools.ietf.org/html/rfc7946#section-3.1.6\n\n[12]: https://tools.ietf.org/html/rfc7946#section-3.1.5\n\n[13]: https://tools.ietf.org/html/rfc7946#section-3.1.7\n\n[14]: https://tools.ietf.org/html/rfc7946#section-5\n\n[15]: https://tools.ietf.org/html/rfc7946#section-3.1.2\n\n<!-- This file is automatically generated. Please don't edit it directly:\nif you find an error, edit the source file (likely index.js), and re-run\n./scripts/generate-readmes in the turf project. -->\n\n---\n\nThis module is part of the [Turfjs project](http://turfjs.org/), an open source\nmodule collection dedicated to geographic algorithms. It is maintained in the\n[Turfjs/turf](https://github.com/Turfjs/turf) repository, where you can create\nPRs and issues.\n\n### Installation\n\nInstall this module individually:\n\n```sh\n$ npm install @turf/meta\n```\n\nOr install the Turf module that includes it as a function:\n\n```sh\n$ npm install @turf/turf\n```\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 TurfJS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@turf/meta/-/meta-6.5.0.tgz#b725c3653c9f432133eaa04d3421f7e51e0418ca",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@turf/meta/-/meta-6.5.0.tgz",
    "hash": "b725c3653c9f432133eaa04d3421f7e51e0418ca",
    "integrity": "sha512-RrArvtsV0vdsCBegoBtOalgdSOfkBrTJ07VkpiCnq/491W67hnMWmDu7e6Ztw0C3WldRYTXkg3SumfdzZxLBHA==",
    "registry": "npm",
    "packageName": "@turf/meta",
    "cacheIntegrity": "sha512-RrArvtsV0vdsCBegoBtOalgdSOfkBrTJ07VkpiCnq/491W67hnMWmDu7e6Ztw0C3WldRYTXkg3SumfdzZxLBHA== sha1-tyXDZTyfQyEz6qBNNCH35R4EGMo="
  },
  "registry": "npm",
  "hash": "b725c3653c9f432133eaa04d3421f7e51e0418ca"
}