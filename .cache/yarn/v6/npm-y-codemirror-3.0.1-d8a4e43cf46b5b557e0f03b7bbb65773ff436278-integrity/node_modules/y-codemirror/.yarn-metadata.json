{
  "manifest": {
    "name": "y-codemirror",
    "version": "3.0.1",
    "type": "module",
    "description": "CodeMirror binding for Yjs",
    "main": "./dist/y-codemirror.cjs",
    "types": "./dist/src/y-codemirror.d.ts",
    "module": "./src/y-codemirror.js",
    "sideEffects": false,
    "funding": {
      "type": "GitHub Sponsors ❤",
      "url": "https://github.com/sponsors/dmonad"
    },
    "exports": {
      ".": {
        "import": "./src/y-codemirror.js",
        "require": "./dist/y-codemirror.cjs"
      },
      "./package.json": "./package.json"
    },
    "files": [
      "dist/*",
      "src/*"
    ],
    "scripts": {
      "clean": "rm -rf dist",
      "dist": "npm run clean && rollup -c && tsc",
      "watch": "rollup -wc",
      "test": "npm run dist && node test/test.node.js",
      "test-extensive": "npm run dist && node test/test.node.js --production --repetition-time 10000",
      "lint": "standard && tsc",
      "preversion": "npm run lint && npm run test-extensive && npm run dist",
      "debug": "concurrently 'http-server -o test.html' 'npm run watch'",
      "start": "concurrently 'http-server -o demo/index.html' 'npm run watch'"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/yjs/y-codemirror.git"
    },
    "keywords": [
      "Yjs"
    ],
    "author": {
      "name": "Kevin Jahns",
      "email": "kevin.jahns@protonmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/yjs/y-codemirror/issues"
    },
    "homepage": "https://github.com/yjs/y-codemirror#readme",
    "peerDependencies": {
      "yjs": "^13.5.17",
      "codemirror": "^5.52.2"
    },
    "dependencies": {
      "lib0": "^0.2.42"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^17.1.0",
      "@rollup/plugin-node-resolve": "^11.2.1",
      "@types/codemirror": "0.0.91",
      "codemirror": "^5.63.3",
      "concurrently": "^5.3.0",
      "http-server": "^0.12.3",
      "jsdom": "^16.7.0",
      "rollup": "^2.59.0",
      "standard": "^14.3.4",
      "typescript": "^3.9.10",
      "y-webrtc": "^10.2.0",
      "yjs": "^13.5.18"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-y-codemirror-3.0.1-d8a4e43cf46b5b557e0f03b7bbb65773ff436278-integrity/node_modules/y-codemirror/package.json",
    "readmeFilename": "README.md",
    "readme": "# y-codemirror\n\n> [CodeMirror](https://codemirror.net/) Binding for [Yjs](https://github.com/yjs/yjs) - [Demo](https://demos.yjs.dev/codemirror/codemirror.html)\n\nThis binding binds a [Y.Text](https://github.com/yjs/yjs#Shared-Types) to a CodeMirror editor.\n\n## Features\n\n* Sync CodeMirror editor\n* Shared Cursors\n* Shared Undo / Redo (each client has its own undo-/redo-history)\n* Successfully recovers when concurrents edit result in an invalid document schema\n\n![CodeMirror Yjs Demo](https://user-images.githubusercontent.com/5553757/79250004-5ed1ac80-7e7e-11ea-81b8-9f833e2d8e66.gif)\n\n### Example\n\n```js\nimport * as Y from 'yjs'\nimport { CodemirrorBinding } from 'y-codemirror'\nimport { WebrtcProvider } from 'y-webrtc'\nimport CodeMirror from 'codemirror'\n\nconst ydoc = new Y.Doc()\nconst provider = new WebrtcProvider('codemirror-demo-room', ydoc)\nconst yText = ydoc.getText('codemirror')\nconst yUndoManager = new Y.UndoManager(yText)\n\nconst editor = CodeMirror(editorDiv, {\n  mode: 'javascript',\n  lineNumbers: true\n})\n\nconst binding = new CodemirrorBinding(yText, editor, provider.awareness, { yUndoManager })\n```\n\nAlso look [here](https://github.com/yjs/yjs-demos/tree/master/codemirror) for a working example.\n\n## API\n\n```js\nconst binding = new CodemirrorBinding(yText: Y.Text, editor: CodeMirror.Editor, [ awareness: y-protocols.Awareness|null, [ { yUndoManager: Y.UndoManager } ]])\n```\n\nBinds a Y.Text type to the CodeMirror document that is currently in use. You can <code>swapDoc</code> the CodeMirror document while a binding is active. Make sure to destroy a binding when it is no longer needed.\n\nWhen `Y.UndoManager` is defined, y-codemirror will use a custom collaborative undo manager instead of CodeMirror's UndoManager. The collaboration-aware Y.UndoManager tracks only local changes by default and doesn't track changes from remote users. You should undo/redo changes using `yUndoManager.undo()` / `yUndoManager.redo()` instead of using CodeMirror's history manager. See the extensive documentation on [`Y.UndoManager`](https://docs.yjs.dev/api/undo-manager) for documentation on how to filter specific changes.\n\n<dl>\n  <b><code>destroy()</code></b>\n  <dd>\nDestroy the CodemirrorBinding, remove all event listeners from the editor and the Yjs document, and destroy the UndoManager.\n  </dd>\n  <b><code>cm: CodeMirror.Editor</code></b>\n  <dd>\nReference to the CodeMirror editor.\n  </dd>\n  <b><code>cmDoc: CodeMirror.Doc</code></b>\n  <dd>\nReference to the CodeMirror document.\n  </dd>\n  <b><code>type: Y.Text</code></b>\n  <dd>\nReference to the Y.Text type that this binding binds to.\n  </dd>\n  <b><code>doc: Y.Doc</code></b>\n  <dd>\nReference to the Yjs document.\n  </dd>\n  <b><code>awareness: y-protocols.Awareness</code></b>\n  <dd>\nReference to the Awareness instance, if defined.\n  </dd>\n  <b><code>on('cursorActivity', (editor: CodeMirror) => void)</code></b>\n  <dd>\nThis event is similar to CodeMirror's 'cursorActivity' event, but is fired\nafter all changes have been applied to the editor and to the Y.Text instance.\n  </dd>\n</dl>\n\nThe shared cursors depend on the Awareness instance that is exported by most providers. The Awareness protocol handles non-permanent data like the number of users, their user names, their cursor location, and their colors. You can change the name and color of the user like this:\n\n```js\nexample.binding.awareness.setLocalStateField('user', { color: '#008833', name: 'My real name' })\n```\n\nIn order to render cursor information you need to embed custom CSS for the user icon. This is a template that you can use for styling cursor information.\n\n```css\n.remote-caret {\n  position: absolute;\n  border-left: black;\n  border-left-style: solid;\n  border-left-width: 2px;\n  height: 1em;\n}\n.remote-caret > div {\n  position: relative;\n  top: -1.05em;\n  font-size: 13px;\n  background-color: rgb(250, 129, 0);\n  font-family: serif;\n  font-style: normal;\n  font-weight: normal;\n  line-height: normal;\n  user-select: none;\n  color: white;\n  padding-left: 2px;\n  padding-right: 2px;\n  z-index: 3;\n}\n```\n\n## License\n\n[The MIT License](./LICENSE) © Kevin Jahns\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Kevin Jahns <kevin.jahns@protonmail.com>.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/y-codemirror/-/y-codemirror-3.0.1.tgz#d8a4e43cf46b5b557e0f03b7bbb65773ff436278",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/y-codemirror/-/y-codemirror-3.0.1.tgz",
    "hash": "d8a4e43cf46b5b557e0f03b7bbb65773ff436278",
    "integrity": "sha512-TsLSoouAZxkxOKbmTj7qdwZNS0lZMVqIdp7/j9EgUUqYj0remZYDGl6VBABrmp9UX1QvX6RoXXqzbNhftgfCbA==",
    "registry": "npm",
    "packageName": "y-codemirror",
    "cacheIntegrity": "sha512-TsLSoouAZxkxOKbmTj7qdwZNS0lZMVqIdp7/j9EgUUqYj0remZYDGl6VBABrmp9UX1QvX6RoXXqzbNhftgfCbA== sha1-2KTkPPRrW1V+DwO3u7ZXc/9DYng="
  },
  "registry": "npm",
  "hash": "d8a4e43cf46b5b557e0f03b7bbb65773ff436278"
}