{
  "manifest": {
    "name": "color-normalize",
    "version": "1.5.0",
    "description": "Convert any color data to sanitized output format",
    "main": "index.js",
    "scripts": {
      "test": "node test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/colorjs/color-normalize.git"
    },
    "keywords": [
      "color",
      "colorjs",
      "rgb",
      "rgba",
      "color-space",
      "css"
    ],
    "author": {
      "name": "Dmitry Yv",
      "email": "dfcreative@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/colorjs/color-normalize/issues"
    },
    "homepage": "https://github.com/colorjs/color-normalize#readme",
    "dependencies": {
      "clamp": "^1.0.1",
      "color-rgba": "^2.1.1",
      "dtype": "^2.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-color-normalize-1.5.0-ee610af9acb15daf73e77a945a847b18e40772da-integrity/node_modules/color-normalize/package.json",
    "readmeFilename": "readme.md",
    "readme": "# color-normalize [![Build Status](https://travis-ci.org/colorjs/color-normalize.png)](https://travis-ci.org/colorjs/color-normalize) [![Greenkeeper badge](https://badges.greenkeeper.io/colorjs/color-normalize.svg)](https://greenkeeper.io/)\n\nConvert any color argument (string, color, number, object etc.) to an array with channels data of desired output format.\n\n\n## Usage\n\n[![npm install color-normalize](https://nodei.co/npm/color-normalize.png?mini=true)](https://npmjs.org/package/color-normalize/)\n\n```js\nconst rgba = require('color-normalize')\n\nrgba('red') // [1, 0, 0, 1]\nrgba('rgb(80, 120, 160)', 'uint8') // Uint8Array<[80, 120, 160, 255]>\nrgba('rgba(255, 255, 255, .5)', 'float64') // Float64Array<[1, 1, 1, .5]>\nrgba('hsla(109, 50%, 50%, .75)', 'uint8') // Uint8Array<[87, 191, 64, 191]>\nrgba(new Float32Array([0, 0.25, 0, 1]), 'uint8_clamped') // Uint8ClampedArray<[0, 64, 0, 255]>\nrgba(new Uint8Array([0, 72, 0, 255]), 'array') // [0, 0.2823529411764706, 0, 1]\n\n// ambivalent input\nrgba([0,0,0]) // [0,0,0]\nrgba([.5,.5,.5]) // [.5,.5,.5]\nrgba([1,1,1]) // [1,1,1]\nrgba([127,127,127]) // [.5,.5,.5]\nrgba([255,255,255]) // [1,1,1]\n```\n\nOutput format can be any [dtype](https://npmjs.org/package/dtype): `uint8`, `uint8_clamped`, `array`, `float32`, `float64` etc. By default it converts to `array` with `0..1` range values.\n\n\n## Related\n\n* [color-alpha](https://github.com/colorjs/color-alpha) − change alpha of a color string.\n* [color-interpolate](https://github.com/colorjs/color-interpolate) − interpolate by color palette.\n* [color-parse](https://github.com/colorjs/color-parse) − comprehensive color string parser.\n* [color-rgba](https://github.com/colorjs/color-rgba) − get rgba channel values from a string.\n* [flatten-vertex-data](https://npmjs.org/package/flatten-vertex-data) − ensure sequence of point coordinates is flat.\n\n## License\n\n(c) 2017 Dima Yv. MIT License\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/color-normalize/-/color-normalize-1.5.0.tgz#ee610af9acb15daf73e77a945a847b18e40772da",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/color-normalize/-/color-normalize-1.5.0.tgz",
    "hash": "ee610af9acb15daf73e77a945a847b18e40772da",
    "integrity": "sha512-rUT/HDXMr6RFffrR53oX3HGWkDOP9goSAQGBkUaAYKjOE2JxozccdGyufageWDlInRAjm/jYPrf/Y38oa+7obw==",
    "registry": "npm",
    "packageName": "color-normalize",
    "cacheIntegrity": "sha512-rUT/HDXMr6RFffrR53oX3HGWkDOP9goSAQGBkUaAYKjOE2JxozccdGyufageWDlInRAjm/jYPrf/Y38oa+7obw== sha1-7mEK+ayxXa9z53qUWoR7GOQHcto="
  },
  "registry": "npm",
  "hash": "ee610af9acb15daf73e77a945a847b18e40772da"
}