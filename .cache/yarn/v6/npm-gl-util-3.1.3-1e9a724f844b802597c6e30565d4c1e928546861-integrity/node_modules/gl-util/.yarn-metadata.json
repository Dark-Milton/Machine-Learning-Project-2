{
  "manifest": {
    "name": "gl-util",
    "version": "3.1.3",
    "description": "Set of practical webgl utils",
    "main": "index.js",
    "scripts": {
      "test": "node test"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dy/gl-util.git"
    },
    "keywords": [
      "gl",
      "webgl",
      "stack.gl"
    ],
    "author": {
      "name": "Dima Yv",
      "email": "dfcreative@gmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dy/gl-util/issues"
    },
    "homepage": "https://github.com/dy/gl-util#readme",
    "dependencies": {
      "is-browser": "^2.0.1",
      "is-firefox": "^1.0.3",
      "is-plain-obj": "^1.1.0",
      "number-is-integer": "^1.0.1",
      "object-assign": "^4.1.0",
      "pick-by-alias": "^1.2.0",
      "weak-map": "^1.0.5"
    },
    "devDependencies": {
      "gl": "^4.1.1",
      "tape": "^4.9.1"
    },
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-gl-util-3.1.3-1e9a724f844b802597c6e30565d4c1e928546861-integrity/node_modules/gl-util/package.json",
    "readmeFilename": "readme.md",
    "readme": "# gl-util [![unstable](http://badges.github.io/stability-badges/dist/unstable.svg)](http://github.com/badges/stability-badges)\n\nSet of practical functions for webgl.\n\n[![npm install gl-util](https://nodei.co/npm/gl-util.png?mini=true)](https://npmjs.org/package/gl-util/)\n\n```js\nconst u = require('gl-util');\n\nlet gl = u.context(canvas)\n\nlet prog = u.program(gl, `\n\tprecision mediump float;\n\n\tattribute vec2 position;\n\n\tvoid main() {\n\t\tgl_Position = vec4(position * 2. - 1., 0, 1);\n\t}\n`, `\n\tprecision mediump float;\n\n\tuniform vec4 color;\n\n\tvoid main () {\n\t\tgl_FragColor = color;\n\t}\n`);\nu.attribute(prog, 'position', [0,0, 1,0, 0,1]);\nu.uniform(prog, 'color', [1, .2, 0, 1.]);\n\ngl.drawArrays(gl.TRIANGLES, 0, 3);\n```\n\n## API\n\n### `context(container|canvas|options?)`\n\nCreate and/or return WebGL context for the canvas element, possibly based on options. If `container` is not defined, `document.body` is used.\n\n| Option | Meaning |\n|---|---|\n| `canvas` | A canvas element to obtain context for. |\n| `container` | An element to create canvas in and return context for it. |\n| `width` | If specified, will set the canvas width. |\n| `height` | If specified, will set the canvas height. |\n| `pixelRatio` | Multiplier for `width` and `height`. |\n| `attributes` | Attributes object. Available attributes: `alpha`, `depth`, `stencil`, `antialias`, `premultipliedAlpha`, `preserveDrawingBuffer` and `failIfMajorPerformanceCaveat`. |\n\n```js\nconst getContext = require('gl-util/context')\n\n// create canvas element in the document.body and retrieve context for it\nlet gl = getContext({\n\tattributes: {\n\t\tantialias: true\n\t}\n})\n```\n\n### `prog = program(gl, prog|vert?, frag?)`\n\nSet active program or create a new program from vertex and fragment sources. Programs are cached for the context by source. The _WebGLProgram_ instance is returned.\n\n```js\nconst program = require('gl-util/program')\n\n// create and set program\nlet prog = program(gl, `\n\tprecision mediump float;\n\n\tattribute vec2 position;\n\n\tvoid main() {\n\t\tgl_Position = vec4(position * 2. - 1., 0, 1);\n\t}\n`, `\n\tprecision mediump float;\n\n\tuniform sampler2D image;\n\tuniform vec2 shape;\n\tuniform float x;\n\n\tvoid main () {\n\t\tgl_FragColor = texture2D(image, gl_FragCoord.xy / shape);\n\t}\n`)\n\n// set active program\nprogram(gl, prog)\n```\n\n### `unif = uniform(gl|program, {name: data, ...} | name?, data?)`\n\nGet/set uniform or multiple uniforms. Returns an object with uniform parameters: `{name, location, data, type}`. Uniforms are stored per-program instance.\n\n```js\nconst uniform = require('gl-util/uniform')\n\nuniform(gl, 'color', [1, .2, 0, 1]);\n```\n\n### `txt = texture(gl, {name: params, ...} | name?, params?)`\n\nSet texture[s] data or parameters:\n\n| Name | Meaning |\n|---|---|\n| `data` | Data passed to texture. Can be array, typed array, image, canvas or string denoting the URL of image to load. |\n| `index` | Texture unit number, if undefined - calculated automatically. |\n| `filter` | Sets texture scaling for both min and mag. Can be defined as two separate properties `minFilter` and `magFilter`. By default `gl.LINEAR`. |\n| `wrap` | Defines texture tiling vertically and horizontally. Can be defined precisely as `wrapS` and `wrapT`. By default `gl.CLAMP_TO_EDGE`, can be `gl.MIRRORED_REPEAT` or `gl.`. |\n| `width` | In pixels |\n| `height` | In pixels |\n| `format` | `gl.ALPHA`, `gl.RGB`, `gl.RGBA` (default), `gl.LUMINANCE`, `gl.LUMINANCE_ALPHA`, `gl.DEPTH_COMPONENT`, `gl.DEPTH_STENCIL`, [etc](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D) |\n| `type` | `gl.UNSIGNED_BYTE`, can be `gl.FLOAT` with proper extension enabled |\n| `level` | `0`, mipmap level. |\n\nReturns object with texture properties `{data, index, location, minFilter, magFilter, wrapS, wrapT, width, height, format, type, texture}`.\n\n```js\nconst texture = require('gl-util/texture')\n\nlet {width, height} = texture(gl, 'image', './picture.gif');\n```\n\n### `attr = attribute(gl, {name: params, ...} | name?, params?)`\n\nSet attribute[s] data or parameters:\n\n| Name | Default | Meaning |\n|---|---|---|\n| `data` | `null` | Data for the attribute, can be array, typed array or array buffer |\n| `size` | `2` | Number of data items per vertex |\n| `stride` | `0` | Offset in bytes between the beginning of consecutive vertex attributes. |\n| `offset` | `0` | Offset in bytes of the first component in the data. Must be a multiple of type. |\n| `type` | `gl.FLOAT` | Data type of each component in the `data` array. Must be one of: `gl.BYTE`, `gl.UNSIGNED_BYTE`, `gl.SHORT`, `gl.UNSIGNED_SHORT`, `gl.FLOAT`. |\n| `usage` | `gl.STATIC_DRAW` | Mode of draw: `gl.STATIC_DRAW` (rare changes), `gl.DYNAMIC_DRAW` (frequent changes) or `gl.STREAM_DRAW` (frequent updates) |\n| `normalized` | `false` | If fixed-point data values should be normalized or are to converted to fixed point values when accessed. |\n| `index` | `0` | Attribute unit number, detected automatically if omitted. |\n| `target` | `gl.ARRAY_BUFFER` | |\n| `buffer` | `null` | WebGLBuffer to use for attribute |\n\nReturns attribute properties `{data, size, stride, offset, usage, type, normalized, index, target, buffer}`.\n\n```js\nconst attribute = require('gl-util/attribute')\n\nattribute(gl, 'position', [0,0,1,0,0,1]);\n```\n\n### `clear(gl, optsion?)`\n\nClear the viewport.\n\n## Motivation\n\nThere are [regl](https://github.com/regl-project/regl), [stack.gl](https://github.com/stackgl/) and many other WegGL components or frameworks, so why gl-util?\n\n* WebGL frameworks API is usually difficult to remember, not much better than pure WebGL, although _regl_ does a great job. _gl-util_ is like functions from any WebGL tutorial - tiny, handy and already familiar.\n* _gl-util_ does not supersede WebGL API - that allows for debugging pure WebGL at any moment.\n* _gl-util_ is tiny - if one needs minimalistic WebGL setup it may be better to opt for a couple of functions than massive stack.gl components or regl (70kb+).\n* regl API may be cumbersome for organizing components\n\n\n## License\n\n(c) 2018 Dmitry Yv. MIT License\n\n\nso\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gl-util/-/gl-util-3.1.3.tgz#1e9a724f844b802597c6e30565d4c1e928546861",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gl-util/-/gl-util-3.1.3.tgz",
    "hash": "1e9a724f844b802597c6e30565d4c1e928546861",
    "integrity": "sha512-dvRTggw5MSkJnCbh74jZzSoTOGnVYK+Bt+Ckqm39CVcl6+zSsxqWk4lr5NKhkqXHL6qvZAU9h17ZF8mIskY9mA==",
    "registry": "npm",
    "packageName": "gl-util",
    "cacheIntegrity": "sha512-dvRTggw5MSkJnCbh74jZzSoTOGnVYK+Bt+Ckqm39CVcl6+zSsxqWk4lr5NKhkqXHL6qvZAU9h17ZF8mIskY9mA== sha1-HppyT4RLgCWXxuMFZdTB6ShUaGE="
  },
  "registry": "npm",
  "hash": "1e9a724f844b802597c6e30565d4c1e928546861"
}