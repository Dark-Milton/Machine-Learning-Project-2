{
  "manifest": {
    "name": "gl-state",
    "version": "1.0.0",
    "description": "Saves WebGL context state",
    "main": "savestate.js",
    "dependencies": {
      "uniq": "^1.0.0"
    },
    "devDependencies": {
      "gl-now": "~1.0.0",
      "beefy": "~1.1.0"
    },
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/mikolalysenko/gl-state.git"
    },
    "keywords": [
      "webgl",
      "state",
      "context",
      "save",
      "stack",
      "pushAttrib",
      "popAttrib"
    ],
    "author": {
      "name": "Mikola Lysenko"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mikolalysenko/gl-state/issues"
    },
    "homepage": "https://github.com/mikolalysenko/gl-state",
    "_registry": "npm",
    "_loc": "/home/jupyter/.cache/yarn/v6/npm-gl-state-1.0.0-262faa75835b0b9c532c12f38adc425d1d30cd17-integrity/node_modules/gl-state/package.json",
    "readmeFilename": "README.md",
    "readme": "gl-state\n========\nPreserves WebGL state variables using a stack. This gives similar capabilities to OpenGL 1.0's pushAttrib/popAttrib, only with finer control over the variables which are stored. These methods are useful when writing simple hierarchical rendering functions, or for debugging operations in the middle of the pipeline.\n\n# Example\n\n```javascript\nvar shell = require(\"gl-now\")()\nvar createStateStack = require(\"gl-state\")\n\nvar stack\n\nshell.on(\"gl-init\", function() {\n\n  //Create stack for saving state\n  stack = createStateStack(shell.gl)\n\n  //Push variables onto stack here\n  stack.push()\n  //... clobber stuff here ...\n  shell.gl.clearColor(1, 0, 1, 0);\n\n  //Context states can also be nested\n  stack.push()\n  // ... clobbber more stuff\n  shell.gl.clearColor(0, 1, 0, 1)\n  stack.pop()\n\n  //Color back to previous value\n  console.log(shell.gl.getParameter(shell.gl.COLOR_CLEAR_VALUE))\n\n  //Restore state\n  stack.pop()\n\n  //Now state is completely restored\n})\n```\n\n# Install\n\n```\nnpm install gl-state\n```\n\n# API\n\n## Constructor\n\n### `var stack = require(\"gl-state\")(gl[, variables])`\nConstructs a new state stack object that saves some subset of the global WebGL state for the context `gl`\n\n* `gl` is a WebGL context\n* `variables` is an optional list of state variables as defined in the specification of [`gl.getParameter`](http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.3). If not specified, the entire state will be saved\n\n**Returns** A new WebGL state stack object\n\n**Note on performance** Modifying the WebGL state is expensive, especially if you update more of it. In general, you should avoid creating too many full context state changes. To do this, you should only specify a list of variables which you plan on actually modifying in the course of your code.  For example, to save only state variables associated with the depth buffer, you could do the following:\n\n\n```javascript\nvar depthStack = createStack(gl, [\n  gl.DEPTH_CLEAR_VALUE,\n  gl.DEPTH_RANGE,\n  gl.DEPTH_TEST,\n  gl.DEPTH_WRITEMASK\n])\n```\n\nIn this way you don't have to save and update more of the WebGL context than is necessary.\n\n**Note on textures** Also the texture unit state is handled in a slightly different way. To specify saving the texture state, you can do:\n\n```javascript\nvar textureStack = createStack(gl, [\n  gl.TEXTURE,\n  gl.ACTIVE_TEXTURE\n])\n```\n\nThis will save the texture state associated to all currently active texture units.\n\n**Note on support** Currently support for saving the state of shaders, uniforms and attributes is somewhat limited. If you are using these features and want to preserve the state of the rendering context you must do this yourself.\n\n## Methods\nThe following methods are exposed by the stack object:\n\n### `stack.push()`\nSaves the current state of the WebGL context onto the stack\n\n### `stack.pop()`\nRestores the last pushed state from the stack.\n\n# Credits\n(c) 2014 Mikola Lysenko. MIT License",
    "licenseText": "\nThe MIT License (MIT)\n\nCopyright (c) 2013 Mikola Lysenko\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/gl-state/-/gl-state-1.0.0.tgz#262faa75835b0b9c532c12f38adc425d1d30cd17",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/gl-state/-/gl-state-1.0.0.tgz",
    "hash": "262faa75835b0b9c532c12f38adc425d1d30cd17",
    "integrity": "sha1-Ji+qdYNbC5xTLBLzitxCXR0wzRc=",
    "registry": "npm",
    "packageName": "gl-state",
    "cacheIntegrity": "sha512-Od836PpgCuTC0W7uHYnEEPRdQPL1FakWlznz3hRvlO6tD5sdLfBKX9qNRGy1DjfMCDTudhyYWxiWjhql1B8N4Q== sha1-Ji+qdYNbC5xTLBLzitxCXR0wzRc="
  },
  "registry": "npm",
  "hash": "262faa75835b0b9c532c12f38adc425d1d30cd17"
}