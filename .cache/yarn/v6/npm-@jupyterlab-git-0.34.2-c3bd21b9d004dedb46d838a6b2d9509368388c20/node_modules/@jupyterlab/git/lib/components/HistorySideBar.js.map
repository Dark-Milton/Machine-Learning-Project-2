{"version":3,"file":"HistorySideBar.js","sourceRoot":"./@jupyterlab/git/src/","sources":["components/HistorySideBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import { TranslationBundle } from '@jupyterlab/translation';\nimport { closeIcon } from '@jupyterlab/ui-components';\nimport { CommandRegistry } from '@lumino/commands';\nimport * as React from 'react';\nimport { CommandArguments } from '../commandsAndMenu';\nimport { GitExtension } from '../model';\nimport { hiddenButtonStyle } from '../style/ActionButtonStyle';\nimport {\n  historySideBarStyle,\n  noHistoryFoundStyle,\n  selectedHistoryFileStyle\n} from '../style/HistorySideBarStyle';\nimport { ContextCommandIDs, Git } from '../tokens';\nimport { ActionButton } from './ActionButton';\nimport { FileItem } from './FileItem';\nimport { PastCommitNode } from './PastCommitNode';\nimport { SinglePastCommitInfo } from './SinglePastCommitInfo';\n\n/**\n * Interface describing component properties.\n */\nexport interface IHistorySideBarProps {\n  /**\n   * List of commits.\n   */\n  commits: Git.ISingleCommitInfo[];\n\n  /**\n   * List of branches.\n   */\n  branches: Git.IBranch[];\n\n  /**\n   * Git extension data model.\n   */\n  model: GitExtension;\n\n  /**\n   * Jupyter App commands registry\n   */\n  commands: CommandRegistry;\n\n  /**\n   * The application language translator.\n   */\n  trans: TranslationBundle;\n}\n\n/**\n * Returns a React component for displaying commit history.\n *\n * @param props - component properties\n * @returns React element\n */\nexport const HistorySideBar: React.FunctionComponent<IHistorySideBarProps> = (\n  props: IHistorySideBarProps\n): React.ReactElement => {\n  /**\n   * Discards the selected file and shows the full history.\n   */\n  const removeSelectedFile = () => {\n    props.model.selectedHistoryFile = null;\n  };\n\n  /**\n   * Curried callback function to display a file diff.\n   *\n   * @param commit Commit data.\n   */\n  const openDiff =\n    (commit: Git.ISingleCommitInfo) =>\n    /**\n     * Returns a callback to be invoked on click to display a file diff.\n     *\n     * @param filePath file path\n     * @param isText indicates whether the file supports displaying a diff\n     * @param previousFilePath when file has been relocated\n     * @returns callback\n     */\n    (filePath: string, isText: boolean, previousFilePath?: string) =>\n    /**\n     * Callback invoked upon clicking to display a file diff.\n     *\n     * @param event - event object\n     */\n    async (event: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\n      // Prevent the commit component from being collapsed:\n      event.stopPropagation();\n\n      if (isText) {\n        try {\n          props.commands.execute(ContextCommandIDs.gitFileDiff, {\n            files: [\n              {\n                filePath,\n                previousFilePath,\n                isText,\n                context: {\n                  previousRef: commit.pre_commit,\n                  currentRef: commit.commit\n                }\n              }\n            ]\n          } as CommandArguments.IGitFileDiff as any);\n        } catch (err) {\n          console.error(`Failed to open diff view for ${filePath}.\\n${err}`);\n        }\n      }\n    };\n\n  /**\n   * Commit info for 'Uncommitted Changes' history.\n   */\n  const uncommitted = React.useMemo<Git.ISingleCommitInfo>(() => {\n    return {\n      author: props.trans.__('You'),\n      commit: `${\n        props.model.selectedHistoryFile?.status === 'staged'\n          ? Git.Diff.SpecialRef.INDEX\n          : Git.Diff.SpecialRef.WORKING\n      }`,\n      pre_commit: 'HEAD',\n      is_binary: props.commits[0]?.is_binary ?? false,\n      commit_msg: props.trans.__('Uncommitted Changes'),\n      date: props.trans.__('now')\n    };\n  }, [props.model.selectedHistoryFile]);\n\n  const commits =\n    props.model.selectedHistoryFile &&\n    props.model.selectedHistoryFile?.status !== 'unmodified'\n      ? [uncommitted, ...props.commits]\n      : props.commits;\n\n  return (\n    <ol className={historySideBarStyle}>\n      {!!props.model.selectedHistoryFile && (\n        <FileItem\n          className={selectedHistoryFileStyle}\n          model={props.model}\n          trans={props.trans}\n          actions={\n            <ActionButton\n              className={hiddenButtonStyle}\n              icon={closeIcon}\n              title={props.trans.__('Discard file history')}\n              onClick={removeSelectedFile}\n            />\n          }\n          file={props.model.selectedHistoryFile}\n          onDoubleClick={removeSelectedFile}\n        />\n      )}\n      {commits.length ? (\n        commits.map((commit: Git.ISingleCommitInfo) => {\n          const commonProps = {\n            commit,\n            branches: props.branches,\n            model: props.model,\n            commands: props.commands,\n            trans: props.trans\n          };\n\n          // Only pass down callback when single file history is open\n          // and its diff is viewable\n          const onOpenDiff =\n            props.model.selectedHistoryFile && !commit.is_binary\n              ? openDiff(commit)(\n                  commit.file_path ?? props.model.selectedHistoryFile.to,\n                  !commit.is_binary,\n                  commit.previous_file_path\n                )\n              : undefined;\n\n          return (\n            <PastCommitNode\n              key={commit.commit}\n              {...commonProps}\n              onOpenDiff={onOpenDiff}\n            >\n              {!props.model.selectedHistoryFile && (\n                <SinglePastCommitInfo\n                  {...commonProps}\n                  onOpenDiff={openDiff(commit)}\n                />\n              )}\n            </PastCommitNode>\n          );\n        })\n      ) : (\n        <li className={noHistoryFoundStyle}>\n          {props.trans.__('No history found.')}\n        </li>\n      )}\n    </ol>\n  );\n};\n"]}